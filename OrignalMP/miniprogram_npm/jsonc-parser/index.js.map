{"version":3,"sources":["main.js","impl/format.js","impl/scanner.js","impl/edit.js","impl/parser.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;AGRA,AFMA,ACHA,AFMA;AGRA,AFMA,ACHA,AFMA;AGRA,AFMA,ACHA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ACFA,AFMA,AGTA,AFMA;ADIA,AGTA,AFMA;ADIA,AGTA,AFMA;ADIA,AGTA,AFMA;ADIA,AGTA,AFMA;ADIA,AGTA,AFMA;ADIA,AGTA,AFMA;ADIA,AGTA,AFMA;ADIA,AGTA,AFMA;ADIA,AGTA,AFMA;ADIA,AGTA,AFMA;ADIA,AGTA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"./impl/format\", \"./impl/edit\", \"./impl/scanner\", \"./impl/parser\"], factory);\n    }\n})(function (require, exports) {\n    /*---------------------------------------------------------------------------------------------\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\n     *--------------------------------------------------------------------------------------------*/\n    \n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.applyEdits = exports.modify = exports.format = exports.printParseErrorCode = exports.stripComments = exports.visit = exports.getNodeValue = exports.getNodePath = exports.findNodeAtOffset = exports.findNodeAtLocation = exports.parseTree = exports.parse = exports.getLocation = exports.createScanner = void 0;\n    var formatter = require(\"./impl/format\");\n    var edit = require(\"./impl/edit\");\n    var scanner = require(\"./impl/scanner\");\n    var parser = require(\"./impl/parser\");\n    /**\n     * Creates a JSON scanner on the given text.\n     * If ignoreTrivia is set, whitespaces or comments are ignored.\n     */\n    exports.createScanner = scanner.createScanner;\n    /**\n     * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n     */\n    exports.getLocation = parser.getLocation;\n    /**\n     * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n     * Therefore, always check the errors list to find out if the input was valid.\n     */\n    exports.parse = parser.parse;\n    /**\n     * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n     */\n    exports.parseTree = parser.parseTree;\n    /**\n     * Finds the node at the given path in a JSON DOM.\n     */\n    exports.findNodeAtLocation = parser.findNodeAtLocation;\n    /**\n     * Finds the innermost node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.\n     */\n    exports.findNodeAtOffset = parser.findNodeAtOffset;\n    /**\n     * Gets the JSON path of the given JSON DOM node\n     */\n    exports.getNodePath = parser.getNodePath;\n    /**\n     * Evaluates the JavaScript object of the given JSON DOM node\n     */\n    exports.getNodeValue = parser.getNodeValue;\n    /**\n     * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n     */\n    exports.visit = parser.visit;\n    /**\n     * Takes JSON with JavaScript-style comments and remove\n     * them. Optionally replaces every none-newline character\n     * of comments with a replaceCharacter\n     */\n    exports.stripComments = parser.stripComments;\n    function printParseErrorCode(code) {\n        switch (code) {\n            case 1 /* InvalidSymbol */: return 'InvalidSymbol';\n            case 2 /* InvalidNumberFormat */: return 'InvalidNumberFormat';\n            case 3 /* PropertyNameExpected */: return 'PropertyNameExpected';\n            case 4 /* ValueExpected */: return 'ValueExpected';\n            case 5 /* ColonExpected */: return 'ColonExpected';\n            case 6 /* CommaExpected */: return 'CommaExpected';\n            case 7 /* CloseBraceExpected */: return 'CloseBraceExpected';\n            case 8 /* CloseBracketExpected */: return 'CloseBracketExpected';\n            case 9 /* EndOfFileExpected */: return 'EndOfFileExpected';\n            case 10 /* InvalidCommentToken */: return 'InvalidCommentToken';\n            case 11 /* UnexpectedEndOfComment */: return 'UnexpectedEndOfComment';\n            case 12 /* UnexpectedEndOfString */: return 'UnexpectedEndOfString';\n            case 13 /* UnexpectedEndOfNumber */: return 'UnexpectedEndOfNumber';\n            case 14 /* InvalidUnicode */: return 'InvalidUnicode';\n            case 15 /* InvalidEscapeCharacter */: return 'InvalidEscapeCharacter';\n            case 16 /* InvalidCharacter */: return 'InvalidCharacter';\n        }\n        return '<unknown ParseErrorCode>';\n    }\n    exports.printParseErrorCode = printParseErrorCode;\n    /**\n     * Computes the edits needed to format a JSON document.\n     *\n     * @param documentText The input text\n     * @param range The range to format or `undefined` to format the full content\n     * @param options The formatting options\n     * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n     * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n     * text in the original document. However, multiple edits can have\n     * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n     * To apply edits to an input, you can use `applyEdits`.\n     */\n    function format(documentText, range, options) {\n        return formatter.format(documentText, range, options);\n    }\n    exports.format = format;\n    /**\n     * Computes the edits needed to modify a value in the JSON document.\n     *\n     * @param documentText The input text\n     * @param path The path of the value to change. The path represents either to the document root, a property or an array item.\n     * If the path points to an non-existing property or item, it will be created.\n     * @param value The new value for the specified property or item. If the value is undefined,\n     * the property or item will be removed.\n     * @param options Options\n     * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n     * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n     * text in the original document. However, multiple edits can have\n     * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n     * To apply edits to an input, you can use `applyEdits`.\n     */\n    function modify(text, path, value, options) {\n        return edit.setProperty(text, path, value, options);\n    }\n    exports.modify = modify;\n    /**\n     * Applies edits to a input string.\n     */\n    function applyEdits(text, edits) {\n        for (var i = edits.length - 1; i >= 0; i--) {\n            text = edit.applyEdit(text, edits[i]);\n        }\n        return text;\n    }\n    exports.applyEdits = applyEdits;\n});\n","(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"./scanner\"], factory);\n    }\n})(function (require, exports) {\n    /*---------------------------------------------------------------------------------------------\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\n     *--------------------------------------------------------------------------------------------*/\n    \n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.isEOL = exports.format = void 0;\n    var scanner_1 = require(\"./scanner\");\n    function format(documentText, range, options) {\n        var initialIndentLevel;\n        var formatText;\n        var formatTextStart;\n        var rangeStart;\n        var rangeEnd;\n        if (range) {\n            rangeStart = range.offset;\n            rangeEnd = rangeStart + range.length;\n            formatTextStart = rangeStart;\n            while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n                formatTextStart--;\n            }\n            var endOffset = rangeEnd;\n            while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n                endOffset++;\n            }\n            formatText = documentText.substring(formatTextStart, endOffset);\n            initialIndentLevel = computeIndentLevel(formatText, options);\n        }\n        else {\n            formatText = documentText;\n            initialIndentLevel = 0;\n            formatTextStart = 0;\n            rangeStart = 0;\n            rangeEnd = documentText.length;\n        }\n        var eol = getEOL(options, documentText);\n        var lineBreak = false;\n        var indentLevel = 0;\n        var indentValue;\n        if (options.insertSpaces) {\n            indentValue = repeat(' ', options.tabSize || 4);\n        }\n        else {\n            indentValue = '\\t';\n        }\n        var scanner = scanner_1.createScanner(formatText, false);\n        var hasError = false;\n        function newLineAndIndent() {\n            return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n        }\n        function scanNext() {\n            var token = scanner.scan();\n            lineBreak = false;\n            while (token === 15 /* Trivia */ || token === 14 /* LineBreakTrivia */) {\n                lineBreak = lineBreak || (token === 14 /* LineBreakTrivia */);\n                token = scanner.scan();\n            }\n            hasError = token === 16 /* Unknown */ || scanner.getTokenError() !== 0 /* None */;\n            return token;\n        }\n        var editOperations = [];\n        function addEdit(text, startOffset, endOffset) {\n            if (!hasError && (!range || (startOffset < rangeEnd && endOffset > rangeStart)) && documentText.substring(startOffset, endOffset) !== text) {\n                editOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });\n            }\n        }\n        var firstToken = scanNext();\n        if (firstToken !== 17 /* EOF */) {\n            var firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n            var initialIndent = repeat(indentValue, initialIndentLevel);\n            addEdit(initialIndent, formatTextStart, firstTokenStart);\n        }\n        while (firstToken !== 17 /* EOF */) {\n            var firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n            var secondToken = scanNext();\n            var replaceContent = '';\n            var needsLineBreak = false;\n            while (!lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n                // comments on the same line: keep them on the same line, but ignore them otherwise\n                var commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n                addEdit(' ', firstTokenEnd, commentTokenStart);\n                firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n                needsLineBreak = secondToken === 12 /* LineCommentTrivia */;\n                replaceContent = needsLineBreak ? newLineAndIndent() : '';\n                secondToken = scanNext();\n            }\n            if (secondToken === 2 /* CloseBraceToken */) {\n                if (firstToken !== 1 /* OpenBraceToken */) {\n                    indentLevel--;\n                    replaceContent = newLineAndIndent();\n                }\n            }\n            else if (secondToken === 4 /* CloseBracketToken */) {\n                if (firstToken !== 3 /* OpenBracketToken */) {\n                    indentLevel--;\n                    replaceContent = newLineAndIndent();\n                }\n            }\n            else {\n                switch (firstToken) {\n                    case 3 /* OpenBracketToken */:\n                    case 1 /* OpenBraceToken */:\n                        indentLevel++;\n                        replaceContent = newLineAndIndent();\n                        break;\n                    case 5 /* CommaToken */:\n                    case 12 /* LineCommentTrivia */:\n                        replaceContent = newLineAndIndent();\n                        break;\n                    case 13 /* BlockCommentTrivia */:\n                        if (lineBreak) {\n                            replaceContent = newLineAndIndent();\n                        }\n                        else if (!needsLineBreak) {\n                            // symbol following comment on the same line: keep on same line, separate with ' '\n                            replaceContent = ' ';\n                        }\n                        break;\n                    case 6 /* ColonToken */:\n                        if (!needsLineBreak) {\n                            replaceContent = ' ';\n                        }\n                        break;\n                    case 10 /* StringLiteral */:\n                        if (secondToken === 6 /* ColonToken */) {\n                            if (!needsLineBreak) {\n                                replaceContent = '';\n                            }\n                            break;\n                        }\n                    // fall through\n                    case 7 /* NullKeyword */:\n                    case 8 /* TrueKeyword */:\n                    case 9 /* FalseKeyword */:\n                    case 11 /* NumericLiteral */:\n                    case 2 /* CloseBraceToken */:\n                    case 4 /* CloseBracketToken */:\n                        if (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */) {\n                            if (!needsLineBreak) {\n                                replaceContent = ' ';\n                            }\n                        }\n                        else if (secondToken !== 5 /* CommaToken */ && secondToken !== 17 /* EOF */) {\n                            hasError = true;\n                        }\n                        break;\n                    case 16 /* Unknown */:\n                        hasError = true;\n                        break;\n                }\n                if (lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n                    replaceContent = newLineAndIndent();\n                }\n            }\n            if (secondToken === 17 /* EOF */) {\n                replaceContent = options.insertFinalNewline ? eol : '';\n            }\n            var secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n            addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n            firstToken = secondToken;\n        }\n        return editOperations;\n    }\n    exports.format = format;\n    function repeat(s, count) {\n        var result = '';\n        for (var i = 0; i < count; i++) {\n            result += s;\n        }\n        return result;\n    }\n    function computeIndentLevel(content, options) {\n        var i = 0;\n        var nChars = 0;\n        var tabSize = options.tabSize || 4;\n        while (i < content.length) {\n            var ch = content.charAt(i);\n            if (ch === ' ') {\n                nChars++;\n            }\n            else if (ch === '\\t') {\n                nChars += tabSize;\n            }\n            else {\n                break;\n            }\n            i++;\n        }\n        return Math.floor(nChars / tabSize);\n    }\n    function getEOL(options, text) {\n        for (var i = 0; i < text.length; i++) {\n            var ch = text.charAt(i);\n            if (ch === '\\r') {\n                if (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                    return '\\r\\n';\n                }\n                return '\\r';\n            }\n            else if (ch === '\\n') {\n                return '\\n';\n            }\n        }\n        return (options && options.eol) || '\\n';\n    }\n    function isEOL(text, offset) {\n        return '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n    }\n    exports.isEOL = isEOL;\n});\n","(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\"], factory);\n    }\n})(function (require, exports) {\n    /*---------------------------------------------------------------------------------------------\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\n     *--------------------------------------------------------------------------------------------*/\n    \n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.createScanner = void 0;\n    /**\n     * Creates a JSON scanner on the given text.\n     * If ignoreTrivia is set, whitespaces or comments are ignored.\n     */\n    function createScanner(text, ignoreTrivia) {\n        if (ignoreTrivia === void 0) { ignoreTrivia = false; }\n        var len = text.length;\n        var pos = 0, value = '', tokenOffset = 0, token = 16 /* Unknown */, lineNumber = 0, lineStartOffset = 0, tokenLineStartOffset = 0, prevTokenLineStartOffset = 0, scanError = 0 /* None */;\n        function scanHexDigits(count, exact) {\n            var digits = 0;\n            var value = 0;\n            while (digits < count || !exact) {\n                var ch = text.charCodeAt(pos);\n                if (ch >= 48 /* _0 */ && ch <= 57 /* _9 */) {\n                    value = value * 16 + ch - 48 /* _0 */;\n                }\n                else if (ch >= 65 /* A */ && ch <= 70 /* F */) {\n                    value = value * 16 + ch - 65 /* A */ + 10;\n                }\n                else if (ch >= 97 /* a */ && ch <= 102 /* f */) {\n                    value = value * 16 + ch - 97 /* a */ + 10;\n                }\n                else {\n                    break;\n                }\n                pos++;\n                digits++;\n            }\n            if (digits < count) {\n                value = -1;\n            }\n            return value;\n        }\n        function setPosition(newPosition) {\n            pos = newPosition;\n            value = '';\n            tokenOffset = 0;\n            token = 16 /* Unknown */;\n            scanError = 0 /* None */;\n        }\n        function scanNumber() {\n            var start = pos;\n            if (text.charCodeAt(pos) === 48 /* _0 */) {\n                pos++;\n            }\n            else {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n            }\n            if (pos < text.length && text.charCodeAt(pos) === 46 /* dot */) {\n                pos++;\n                if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                    while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                        pos++;\n                    }\n                }\n                else {\n                    scanError = 3 /* UnexpectedEndOfNumber */;\n                    return text.substring(start, pos);\n                }\n            }\n            var end = pos;\n            if (pos < text.length && (text.charCodeAt(pos) === 69 /* E */ || text.charCodeAt(pos) === 101 /* e */)) {\n                pos++;\n                if (pos < text.length && text.charCodeAt(pos) === 43 /* plus */ || text.charCodeAt(pos) === 45 /* minus */) {\n                    pos++;\n                }\n                if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                    while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                        pos++;\n                    }\n                    end = pos;\n                }\n                else {\n                    scanError = 3 /* UnexpectedEndOfNumber */;\n                }\n            }\n            return text.substring(start, end);\n        }\n        function scanString() {\n            var result = '', start = pos;\n            while (true) {\n                if (pos >= len) {\n                    result += text.substring(start, pos);\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                var ch = text.charCodeAt(pos);\n                if (ch === 34 /* doubleQuote */) {\n                    result += text.substring(start, pos);\n                    pos++;\n                    break;\n                }\n                if (ch === 92 /* backslash */) {\n                    result += text.substring(start, pos);\n                    pos++;\n                    if (pos >= len) {\n                        scanError = 2 /* UnexpectedEndOfString */;\n                        break;\n                    }\n                    var ch2 = text.charCodeAt(pos++);\n                    switch (ch2) {\n                        case 34 /* doubleQuote */:\n                            result += '\\\"';\n                            break;\n                        case 92 /* backslash */:\n                            result += '\\\\';\n                            break;\n                        case 47 /* slash */:\n                            result += '/';\n                            break;\n                        case 98 /* b */:\n                            result += '\\b';\n                            break;\n                        case 102 /* f */:\n                            result += '\\f';\n                            break;\n                        case 110 /* n */:\n                            result += '\\n';\n                            break;\n                        case 114 /* r */:\n                            result += '\\r';\n                            break;\n                        case 116 /* t */:\n                            result += '\\t';\n                            break;\n                        case 117 /* u */:\n                            var ch3 = scanHexDigits(4, true);\n                            if (ch3 >= 0) {\n                                result += String.fromCharCode(ch3);\n                            }\n                            else {\n                                scanError = 4 /* InvalidUnicode */;\n                            }\n                            break;\n                        default:\n                            scanError = 5 /* InvalidEscapeCharacter */;\n                    }\n                    start = pos;\n                    continue;\n                }\n                if (ch >= 0 && ch <= 0x1f) {\n                    if (isLineBreak(ch)) {\n                        result += text.substring(start, pos);\n                        scanError = 2 /* UnexpectedEndOfString */;\n                        break;\n                    }\n                    else {\n                        scanError = 6 /* InvalidCharacter */;\n                        // mark as error but continue with string\n                    }\n                }\n                pos++;\n            }\n            return result;\n        }\n        function scanNext() {\n            value = '';\n            scanError = 0 /* None */;\n            tokenOffset = pos;\n            lineStartOffset = lineNumber;\n            prevTokenLineStartOffset = tokenLineStartOffset;\n            if (pos >= len) {\n                // at the end\n                tokenOffset = len;\n                return token = 17 /* EOF */;\n            }\n            var code = text.charCodeAt(pos);\n            // trivia: whitespace\n            if (isWhiteSpace(code)) {\n                do {\n                    pos++;\n                    value += String.fromCharCode(code);\n                    code = text.charCodeAt(pos);\n                } while (isWhiteSpace(code));\n                return token = 15 /* Trivia */;\n            }\n            // trivia: newlines\n            if (isLineBreak(code)) {\n                pos++;\n                value += String.fromCharCode(code);\n                if (code === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                    pos++;\n                    value += '\\n';\n                }\n                lineNumber++;\n                tokenLineStartOffset = pos;\n                return token = 14 /* LineBreakTrivia */;\n            }\n            switch (code) {\n                // tokens: []{}:,\n                case 123 /* openBrace */:\n                    pos++;\n                    return token = 1 /* OpenBraceToken */;\n                case 125 /* closeBrace */:\n                    pos++;\n                    return token = 2 /* CloseBraceToken */;\n                case 91 /* openBracket */:\n                    pos++;\n                    return token = 3 /* OpenBracketToken */;\n                case 93 /* closeBracket */:\n                    pos++;\n                    return token = 4 /* CloseBracketToken */;\n                case 58 /* colon */:\n                    pos++;\n                    return token = 6 /* ColonToken */;\n                case 44 /* comma */:\n                    pos++;\n                    return token = 5 /* CommaToken */;\n                // strings\n                case 34 /* doubleQuote */:\n                    pos++;\n                    value = scanString();\n                    return token = 10 /* StringLiteral */;\n                // comments\n                case 47 /* slash */:\n                    var start = pos - 1;\n                    // Single-line comment\n                    if (text.charCodeAt(pos + 1) === 47 /* slash */) {\n                        pos += 2;\n                        while (pos < len) {\n                            if (isLineBreak(text.charCodeAt(pos))) {\n                                break;\n                            }\n                            pos++;\n                        }\n                        value = text.substring(start, pos);\n                        return token = 12 /* LineCommentTrivia */;\n                    }\n                    // Multi-line comment\n                    if (text.charCodeAt(pos + 1) === 42 /* asterisk */) {\n                        pos += 2;\n                        var safeLength = len - 1; // For lookahead.\n                        var commentClosed = false;\n                        while (pos < safeLength) {\n                            var ch = text.charCodeAt(pos);\n                            if (ch === 42 /* asterisk */ && text.charCodeAt(pos + 1) === 47 /* slash */) {\n                                pos += 2;\n                                commentClosed = true;\n                                break;\n                            }\n                            pos++;\n                            if (isLineBreak(ch)) {\n                                if (ch === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                                    pos++;\n                                }\n                                lineNumber++;\n                                tokenLineStartOffset = pos;\n                            }\n                        }\n                        if (!commentClosed) {\n                            pos++;\n                            scanError = 1 /* UnexpectedEndOfComment */;\n                        }\n                        value = text.substring(start, pos);\n                        return token = 13 /* BlockCommentTrivia */;\n                    }\n                    // just a single slash\n                    value += String.fromCharCode(code);\n                    pos++;\n                    return token = 16 /* Unknown */;\n                // numbers\n                case 45 /* minus */:\n                    value += String.fromCharCode(code);\n                    pos++;\n                    if (pos === len || !isDigit(text.charCodeAt(pos))) {\n                        return token = 16 /* Unknown */;\n                    }\n                // found a minus, followed by a number so\n                // we fall through to proceed with scanning\n                // numbers\n                case 48 /* _0 */:\n                case 49 /* _1 */:\n                case 50 /* _2 */:\n                case 51 /* _3 */:\n                case 52 /* _4 */:\n                case 53 /* _5 */:\n                case 54 /* _6 */:\n                case 55 /* _7 */:\n                case 56 /* _8 */:\n                case 57 /* _9 */:\n                    value += scanNumber();\n                    return token = 11 /* NumericLiteral */;\n                // literals and unknown symbols\n                default:\n                    // is a literal? Read the full word.\n                    while (pos < len && isUnknownContentCharacter(code)) {\n                        pos++;\n                        code = text.charCodeAt(pos);\n                    }\n                    if (tokenOffset !== pos) {\n                        value = text.substring(tokenOffset, pos);\n                        // keywords: true, false, null\n                        switch (value) {\n                            case 'true': return token = 8 /* TrueKeyword */;\n                            case 'false': return token = 9 /* FalseKeyword */;\n                            case 'null': return token = 7 /* NullKeyword */;\n                        }\n                        return token = 16 /* Unknown */;\n                    }\n                    // some\n                    value += String.fromCharCode(code);\n                    pos++;\n                    return token = 16 /* Unknown */;\n            }\n        }\n        function isUnknownContentCharacter(code) {\n            if (isWhiteSpace(code) || isLineBreak(code)) {\n                return false;\n            }\n            switch (code) {\n                case 125 /* closeBrace */:\n                case 93 /* closeBracket */:\n                case 123 /* openBrace */:\n                case 91 /* openBracket */:\n                case 34 /* doubleQuote */:\n                case 58 /* colon */:\n                case 44 /* comma */:\n                case 47 /* slash */:\n                    return false;\n            }\n            return true;\n        }\n        function scanNextNonTrivia() {\n            var result;\n            do {\n                result = scanNext();\n            } while (result >= 12 /* LineCommentTrivia */ && result <= 15 /* Trivia */);\n            return result;\n        }\n        return {\n            setPosition: setPosition,\n            getPosition: function () { return pos; },\n            scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n            getToken: function () { return token; },\n            getTokenValue: function () { return value; },\n            getTokenOffset: function () { return tokenOffset; },\n            getTokenLength: function () { return pos - tokenOffset; },\n            getTokenStartLine: function () { return lineStartOffset; },\n            getTokenStartCharacter: function () { return tokenOffset - prevTokenLineStartOffset; },\n            getTokenError: function () { return scanError; },\n        };\n    }\n    exports.createScanner = createScanner;\n    function isWhiteSpace(ch) {\n        return ch === 32 /* space */ || ch === 9 /* tab */ || ch === 11 /* verticalTab */ || ch === 12 /* formFeed */ ||\n            ch === 160 /* nonBreakingSpace */ || ch === 5760 /* ogham */ || ch >= 8192 /* enQuad */ && ch <= 8203 /* zeroWidthSpace */ ||\n            ch === 8239 /* narrowNoBreakSpace */ || ch === 8287 /* mathematicalSpace */ || ch === 12288 /* ideographicSpace */ || ch === 65279 /* byteOrderMark */;\n    }\n    function isLineBreak(ch) {\n        return ch === 10 /* lineFeed */ || ch === 13 /* carriageReturn */ || ch === 8232 /* lineSeparator */ || ch === 8233 /* paragraphSeparator */;\n    }\n    function isDigit(ch) {\n        return ch >= 48 /* _0 */ && ch <= 57 /* _9 */;\n    }\n});\n","(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"./format\", \"./parser\"], factory);\n    }\n})(function (require, exports) {\n    /*---------------------------------------------------------------------------------------------\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\n     *--------------------------------------------------------------------------------------------*/\n    \n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.isWS = exports.applyEdit = exports.setProperty = exports.removeProperty = void 0;\n    var format_1 = require(\"./format\");\n    var parser_1 = require(\"./parser\");\n    function removeProperty(text, path, options) {\n        return setProperty(text, path, void 0, options);\n    }\n    exports.removeProperty = removeProperty;\n    function setProperty(text, originalPath, value, options) {\n        var _a;\n        var path = originalPath.slice();\n        var errors = [];\n        var root = parser_1.parseTree(text, errors);\n        var parent = void 0;\n        var lastSegment = void 0;\n        while (path.length > 0) {\n            lastSegment = path.pop();\n            parent = parser_1.findNodeAtLocation(root, path);\n            if (parent === void 0 && value !== void 0) {\n                if (typeof lastSegment === 'string') {\n                    value = (_a = {}, _a[lastSegment] = value, _a);\n                }\n                else {\n                    value = [value];\n                }\n            }\n            else {\n                break;\n            }\n        }\n        if (!parent) {\n            // empty document\n            if (value === void 0) { // delete\n                throw new Error('Can not delete in empty document');\n            }\n            return withFormatting(text, { offset: root ? root.offset : 0, length: root ? root.length : 0, content: JSON.stringify(value) }, options);\n        }\n        else if (parent.type === 'object' && typeof lastSegment === 'string' && Array.isArray(parent.children)) {\n            var existing = parser_1.findNodeAtLocation(parent, [lastSegment]);\n            if (existing !== void 0) {\n                if (value === void 0) { // delete\n                    if (!existing.parent) {\n                        throw new Error('Malformed AST');\n                    }\n                    var propertyIndex = parent.children.indexOf(existing.parent);\n                    var removeBegin = void 0;\n                    var removeEnd = existing.parent.offset + existing.parent.length;\n                    if (propertyIndex > 0) {\n                        // remove the comma of the previous node\n                        var previous = parent.children[propertyIndex - 1];\n                        removeBegin = previous.offset + previous.length;\n                    }\n                    else {\n                        removeBegin = parent.offset + 1;\n                        if (parent.children.length > 1) {\n                            // remove the comma of the next node\n                            var next = parent.children[1];\n                            removeEnd = next.offset;\n                        }\n                    }\n                    return withFormatting(text, { offset: removeBegin, length: removeEnd - removeBegin, content: '' }, options);\n                }\n                else {\n                    // set value of existing property\n                    return withFormatting(text, { offset: existing.offset, length: existing.length, content: JSON.stringify(value) }, options);\n                }\n            }\n            else {\n                if (value === void 0) { // delete\n                    return []; // property does not exist, nothing to do\n                }\n                var newProperty = JSON.stringify(lastSegment) + \": \" + JSON.stringify(value);\n                var index = options.getInsertionIndex ? options.getInsertionIndex(parent.children.map(function (p) { return p.children[0].value; })) : parent.children.length;\n                var edit = void 0;\n                if (index > 0) {\n                    var previous = parent.children[index - 1];\n                    edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n                }\n                else if (parent.children.length === 0) {\n                    edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n                }\n                else {\n                    edit = { offset: parent.offset + 1, length: 0, content: newProperty + ',' };\n                }\n                return withFormatting(text, edit, options);\n            }\n        }\n        else if (parent.type === 'array' && typeof lastSegment === 'number' && Array.isArray(parent.children)) {\n            var insertIndex = lastSegment;\n            if (insertIndex === -1) {\n                // Insert\n                var newProperty = \"\" + JSON.stringify(value);\n                var edit = void 0;\n                if (parent.children.length === 0) {\n                    edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n                }\n                else {\n                    var previous = parent.children[parent.children.length - 1];\n                    edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n                }\n                return withFormatting(text, edit, options);\n            }\n            else if (value === void 0 && parent.children.length >= 0) {\n                // Removal\n                var removalIndex = lastSegment;\n                var toRemove = parent.children[removalIndex];\n                var edit = void 0;\n                if (parent.children.length === 1) {\n                    // only item\n                    edit = { offset: parent.offset + 1, length: parent.length - 2, content: '' };\n                }\n                else if (parent.children.length - 1 === removalIndex) {\n                    // last item\n                    var previous = parent.children[removalIndex - 1];\n                    var offset = previous.offset + previous.length;\n                    var parentEndOffset = parent.offset + parent.length;\n                    edit = { offset: offset, length: parentEndOffset - 2 - offset, content: '' };\n                }\n                else {\n                    edit = { offset: toRemove.offset, length: parent.children[removalIndex + 1].offset - toRemove.offset, content: '' };\n                }\n                return withFormatting(text, edit, options);\n            }\n            else if (value !== void 0) {\n                var edit = void 0;\n                var newProperty = \"\" + JSON.stringify(value);\n                if (!options.isArrayInsertion && parent.children.length > lastSegment) {\n                    var toModify = parent.children[lastSegment];\n                    edit = { offset: toModify.offset, length: toModify.length, content: newProperty };\n                }\n                else if (parent.children.length === 0 || lastSegment === 0) {\n                    edit = { offset: parent.offset + 1, length: 0, content: parent.children.length === 0 ? newProperty : newProperty + ',' };\n                }\n                else {\n                    var index = lastSegment > parent.children.length ? parent.children.length : lastSegment;\n                    var previous = parent.children[index - 1];\n                    edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n                }\n                return withFormatting(text, edit, options);\n            }\n            else {\n                throw new Error(\"Can not \" + (value === void 0 ? 'remove' : (options.isArrayInsertion ? 'insert' : 'modify')) + \" Array index \" + insertIndex + \" as length is not sufficient\");\n            }\n        }\n        else {\n            throw new Error(\"Can not add \" + (typeof lastSegment !== 'number' ? 'index' : 'property') + \" to parent of type \" + parent.type);\n        }\n    }\n    exports.setProperty = setProperty;\n    function withFormatting(text, edit, options) {\n        if (!options.formattingOptions) {\n            return [edit];\n        }\n        // apply the edit\n        var newText = applyEdit(text, edit);\n        // format the new text\n        var begin = edit.offset;\n        var end = edit.offset + edit.content.length;\n        if (edit.length === 0 || edit.content.length === 0) { // insert or remove\n            while (begin > 0 && !format_1.isEOL(newText, begin - 1)) {\n                begin--;\n            }\n            while (end < newText.length && !format_1.isEOL(newText, end)) {\n                end++;\n            }\n        }\n        var edits = format_1.format(newText, { offset: begin, length: end - begin }, options.formattingOptions);\n        // apply the formatting edits and track the begin and end offsets of the changes\n        for (var i = edits.length - 1; i >= 0; i--) {\n            var edit_1 = edits[i];\n            newText = applyEdit(newText, edit_1);\n            begin = Math.min(begin, edit_1.offset);\n            end = Math.max(end, edit_1.offset + edit_1.length);\n            end += edit_1.content.length - edit_1.length;\n        }\n        // create a single edit with all changes\n        var editLength = text.length - (newText.length - end) - begin;\n        return [{ offset: begin, length: editLength, content: newText.substring(begin, end) }];\n    }\n    function applyEdit(text, edit) {\n        return text.substring(0, edit.offset) + edit.content + text.substring(edit.offset + edit.length);\n    }\n    exports.applyEdit = applyEdit;\n    function isWS(text, offset) {\n        return '\\r\\n \\t'.indexOf(text.charAt(offset)) !== -1;\n    }\n    exports.isWS = isWS;\n});\n","(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"./scanner\"], factory);\n    }\n})(function (require, exports) {\n    /*---------------------------------------------------------------------------------------------\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\n     *--------------------------------------------------------------------------------------------*/\n    \n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.getNodeType = exports.stripComments = exports.visit = exports.findNodeAtOffset = exports.contains = exports.getNodeValue = exports.getNodePath = exports.findNodeAtLocation = exports.parseTree = exports.parse = exports.getLocation = void 0;\n    var scanner_1 = require(\"./scanner\");\n    var ParseOptions;\n    (function (ParseOptions) {\n        ParseOptions.DEFAULT = {\n            allowTrailingComma: false\n        };\n    })(ParseOptions || (ParseOptions = {}));\n    /**\n     * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n     */\n    function getLocation(text, position) {\n        var segments = []; // strings or numbers\n        var earlyReturnException = new Object();\n        var previousNode = undefined;\n        var previousNodeInst = {\n            value: {},\n            offset: 0,\n            length: 0,\n            type: 'object',\n            parent: undefined\n        };\n        var isAtPropertyKey = false;\n        function setPreviousNode(value, offset, length, type) {\n            previousNodeInst.value = value;\n            previousNodeInst.offset = offset;\n            previousNodeInst.length = length;\n            previousNodeInst.type = type;\n            previousNodeInst.colonOffset = undefined;\n            previousNode = previousNodeInst;\n        }\n        try {\n            visit(text, {\n                onObjectBegin: function (offset, length) {\n                    if (position <= offset) {\n                        throw earlyReturnException;\n                    }\n                    previousNode = undefined;\n                    isAtPropertyKey = position > offset;\n                    segments.push(''); // push a placeholder (will be replaced)\n                },\n                onObjectProperty: function (name, offset, length) {\n                    if (position < offset) {\n                        throw earlyReturnException;\n                    }\n                    setPreviousNode(name, offset, length, 'property');\n                    segments[segments.length - 1] = name;\n                    if (position <= offset + length) {\n                        throw earlyReturnException;\n                    }\n                },\n                onObjectEnd: function (offset, length) {\n                    if (position <= offset) {\n                        throw earlyReturnException;\n                    }\n                    previousNode = undefined;\n                    segments.pop();\n                },\n                onArrayBegin: function (offset, length) {\n                    if (position <= offset) {\n                        throw earlyReturnException;\n                    }\n                    previousNode = undefined;\n                    segments.push(0);\n                },\n                onArrayEnd: function (offset, length) {\n                    if (position <= offset) {\n                        throw earlyReturnException;\n                    }\n                    previousNode = undefined;\n                    segments.pop();\n                },\n                onLiteralValue: function (value, offset, length) {\n                    if (position < offset) {\n                        throw earlyReturnException;\n                    }\n                    setPreviousNode(value, offset, length, getNodeType(value));\n                    if (position <= offset + length) {\n                        throw earlyReturnException;\n                    }\n                },\n                onSeparator: function (sep, offset, length) {\n                    if (position <= offset) {\n                        throw earlyReturnException;\n                    }\n                    if (sep === ':' && previousNode && previousNode.type === 'property') {\n                        previousNode.colonOffset = offset;\n                        isAtPropertyKey = false;\n                        previousNode = undefined;\n                    }\n                    else if (sep === ',') {\n                        var last = segments[segments.length - 1];\n                        if (typeof last === 'number') {\n                            segments[segments.length - 1] = last + 1;\n                        }\n                        else {\n                            isAtPropertyKey = true;\n                            segments[segments.length - 1] = '';\n                        }\n                        previousNode = undefined;\n                    }\n                }\n            });\n        }\n        catch (e) {\n            if (e !== earlyReturnException) {\n                throw e;\n            }\n        }\n        return {\n            path: segments,\n            previousNode: previousNode,\n            isAtPropertyKey: isAtPropertyKey,\n            matches: function (pattern) {\n                var k = 0;\n                for (var i = 0; k < pattern.length && i < segments.length; i++) {\n                    if (pattern[k] === segments[i] || pattern[k] === '*') {\n                        k++;\n                    }\n                    else if (pattern[k] !== '**') {\n                        return false;\n                    }\n                }\n                return k === pattern.length;\n            }\n        };\n    }\n    exports.getLocation = getLocation;\n    /**\n     * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n     * Therefore always check the errors list to find out if the input was valid.\n     */\n    function parse(text, errors, options) {\n        if (errors === void 0) { errors = []; }\n        if (options === void 0) { options = ParseOptions.DEFAULT; }\n        var currentProperty = null;\n        var currentParent = [];\n        var previousParents = [];\n        function onValue(value) {\n            if (Array.isArray(currentParent)) {\n                currentParent.push(value);\n            }\n            else if (currentProperty !== null) {\n                currentParent[currentProperty] = value;\n            }\n        }\n        var visitor = {\n            onObjectBegin: function () {\n                var object = {};\n                onValue(object);\n                previousParents.push(currentParent);\n                currentParent = object;\n                currentProperty = null;\n            },\n            onObjectProperty: function (name) {\n                currentProperty = name;\n            },\n            onObjectEnd: function () {\n                currentParent = previousParents.pop();\n            },\n            onArrayBegin: function () {\n                var array = [];\n                onValue(array);\n                previousParents.push(currentParent);\n                currentParent = array;\n                currentProperty = null;\n            },\n            onArrayEnd: function () {\n                currentParent = previousParents.pop();\n            },\n            onLiteralValue: onValue,\n            onError: function (error, offset, length) {\n                errors.push({ error: error, offset: offset, length: length });\n            }\n        };\n        visit(text, visitor, options);\n        return currentParent[0];\n    }\n    exports.parse = parse;\n    /**\n     * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n     */\n    function parseTree(text, errors, options) {\n        if (errors === void 0) { errors = []; }\n        if (options === void 0) { options = ParseOptions.DEFAULT; }\n        var currentParent = { type: 'array', offset: -1, length: -1, children: [], parent: undefined }; // artificial root\n        function ensurePropertyComplete(endOffset) {\n            if (currentParent.type === 'property') {\n                currentParent.length = endOffset - currentParent.offset;\n                currentParent = currentParent.parent;\n            }\n        }\n        function onValue(valueNode) {\n            currentParent.children.push(valueNode);\n            return valueNode;\n        }\n        var visitor = {\n            onObjectBegin: function (offset) {\n                currentParent = onValue({ type: 'object', offset: offset, length: -1, parent: currentParent, children: [] });\n            },\n            onObjectProperty: function (name, offset, length) {\n                currentParent = onValue({ type: 'property', offset: offset, length: -1, parent: currentParent, children: [] });\n                currentParent.children.push({ type: 'string', value: name, offset: offset, length: length, parent: currentParent });\n            },\n            onObjectEnd: function (offset, length) {\n                ensurePropertyComplete(offset + length); // in case of a missing value for a property: make sure property is complete\n                currentParent.length = offset + length - currentParent.offset;\n                currentParent = currentParent.parent;\n                ensurePropertyComplete(offset + length);\n            },\n            onArrayBegin: function (offset, length) {\n                currentParent = onValue({ type: 'array', offset: offset, length: -1, parent: currentParent, children: [] });\n            },\n            onArrayEnd: function (offset, length) {\n                currentParent.length = offset + length - currentParent.offset;\n                currentParent = currentParent.parent;\n                ensurePropertyComplete(offset + length);\n            },\n            onLiteralValue: function (value, offset, length) {\n                onValue({ type: getNodeType(value), offset: offset, length: length, parent: currentParent, value: value });\n                ensurePropertyComplete(offset + length);\n            },\n            onSeparator: function (sep, offset, length) {\n                if (currentParent.type === 'property') {\n                    if (sep === ':') {\n                        currentParent.colonOffset = offset;\n                    }\n                    else if (sep === ',') {\n                        ensurePropertyComplete(offset);\n                    }\n                }\n            },\n            onError: function (error, offset, length) {\n                errors.push({ error: error, offset: offset, length: length });\n            }\n        };\n        visit(text, visitor, options);\n        var result = currentParent.children[0];\n        if (result) {\n            delete result.parent;\n        }\n        return result;\n    }\n    exports.parseTree = parseTree;\n    /**\n     * Finds the node at the given path in a JSON DOM.\n     */\n    function findNodeAtLocation(root, path) {\n        if (!root) {\n            return undefined;\n        }\n        var node = root;\n        for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\n            var segment = path_1[_i];\n            if (typeof segment === 'string') {\n                if (node.type !== 'object' || !Array.isArray(node.children)) {\n                    return undefined;\n                }\n                var found = false;\n                for (var _a = 0, _b = node.children; _a < _b.length; _a++) {\n                    var propertyNode = _b[_a];\n                    if (Array.isArray(propertyNode.children) && propertyNode.children[0].value === segment) {\n                        node = propertyNode.children[1];\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    return undefined;\n                }\n            }\n            else {\n                var index = segment;\n                if (node.type !== 'array' || index < 0 || !Array.isArray(node.children) || index >= node.children.length) {\n                    return undefined;\n                }\n                node = node.children[index];\n            }\n        }\n        return node;\n    }\n    exports.findNodeAtLocation = findNodeAtLocation;\n    /**\n     * Gets the JSON path of the given JSON DOM node\n     */\n    function getNodePath(node) {\n        if (!node.parent || !node.parent.children) {\n            return [];\n        }\n        var path = getNodePath(node.parent);\n        if (node.parent.type === 'property') {\n            var key = node.parent.children[0].value;\n            path.push(key);\n        }\n        else if (node.parent.type === 'array') {\n            var index = node.parent.children.indexOf(node);\n            if (index !== -1) {\n                path.push(index);\n            }\n        }\n        return path;\n    }\n    exports.getNodePath = getNodePath;\n    /**\n     * Evaluates the JavaScript object of the given JSON DOM node\n     */\n    function getNodeValue(node) {\n        switch (node.type) {\n            case 'array':\n                return node.children.map(getNodeValue);\n            case 'object':\n                var obj = Object.create(null);\n                for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n                    var prop = _a[_i];\n                    var valueNode = prop.children[1];\n                    if (valueNode) {\n                        obj[prop.children[0].value] = getNodeValue(valueNode);\n                    }\n                }\n                return obj;\n            case 'null':\n            case 'string':\n            case 'number':\n            case 'boolean':\n                return node.value;\n            default:\n                return undefined;\n        }\n    }\n    exports.getNodeValue = getNodeValue;\n    function contains(node, offset, includeRightBound) {\n        if (includeRightBound === void 0) { includeRightBound = false; }\n        return (offset >= node.offset && offset < (node.offset + node.length)) || includeRightBound && (offset === (node.offset + node.length));\n    }\n    exports.contains = contains;\n    /**\n     * Finds the most inner node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.\n     */\n    function findNodeAtOffset(node, offset, includeRightBound) {\n        if (includeRightBound === void 0) { includeRightBound = false; }\n        if (contains(node, offset, includeRightBound)) {\n            var children = node.children;\n            if (Array.isArray(children)) {\n                for (var i = 0; i < children.length && children[i].offset <= offset; i++) {\n                    var item = findNodeAtOffset(children[i], offset, includeRightBound);\n                    if (item) {\n                        return item;\n                    }\n                }\n            }\n            return node;\n        }\n        return undefined;\n    }\n    exports.findNodeAtOffset = findNodeAtOffset;\n    /**\n     * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n     */\n    function visit(text, visitor, options) {\n        if (options === void 0) { options = ParseOptions.DEFAULT; }\n        var _scanner = scanner_1.createScanner(text, false);\n        function toNoArgVisit(visitFunction) {\n            return visitFunction ? function () { return visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()); } : function () { return true; };\n        }\n        function toOneArgVisit(visitFunction) {\n            return visitFunction ? function (arg) { return visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()); } : function () { return true; };\n        }\n        var onObjectBegin = toNoArgVisit(visitor.onObjectBegin), onObjectProperty = toOneArgVisit(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisit(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisit(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);\n        var disallowComments = options && options.disallowComments;\n        var allowTrailingComma = options && options.allowTrailingComma;\n        function scanNext() {\n            while (true) {\n                var token = _scanner.scan();\n                switch (_scanner.getTokenError()) {\n                    case 4 /* InvalidUnicode */:\n                        handleError(14 /* InvalidUnicode */);\n                        break;\n                    case 5 /* InvalidEscapeCharacter */:\n                        handleError(15 /* InvalidEscapeCharacter */);\n                        break;\n                    case 3 /* UnexpectedEndOfNumber */:\n                        handleError(13 /* UnexpectedEndOfNumber */);\n                        break;\n                    case 1 /* UnexpectedEndOfComment */:\n                        if (!disallowComments) {\n                            handleError(11 /* UnexpectedEndOfComment */);\n                        }\n                        break;\n                    case 2 /* UnexpectedEndOfString */:\n                        handleError(12 /* UnexpectedEndOfString */);\n                        break;\n                    case 6 /* InvalidCharacter */:\n                        handleError(16 /* InvalidCharacter */);\n                        break;\n                }\n                switch (token) {\n                    case 12 /* LineCommentTrivia */:\n                    case 13 /* BlockCommentTrivia */:\n                        if (disallowComments) {\n                            handleError(10 /* InvalidCommentToken */);\n                        }\n                        else {\n                            onComment();\n                        }\n                        break;\n                    case 16 /* Unknown */:\n                        handleError(1 /* InvalidSymbol */);\n                        break;\n                    case 15 /* Trivia */:\n                    case 14 /* LineBreakTrivia */:\n                        break;\n                    default:\n                        return token;\n                }\n            }\n        }\n        function handleError(error, skipUntilAfter, skipUntil) {\n            if (skipUntilAfter === void 0) { skipUntilAfter = []; }\n            if (skipUntil === void 0) { skipUntil = []; }\n            onError(error);\n            if (skipUntilAfter.length + skipUntil.length > 0) {\n                var token = _scanner.getToken();\n                while (token !== 17 /* EOF */) {\n                    if (skipUntilAfter.indexOf(token) !== -1) {\n                        scanNext();\n                        break;\n                    }\n                    else if (skipUntil.indexOf(token) !== -1) {\n                        break;\n                    }\n                    token = scanNext();\n                }\n            }\n        }\n        function parseString(isValue) {\n            var value = _scanner.getTokenValue();\n            if (isValue) {\n                onLiteralValue(value);\n            }\n            else {\n                onObjectProperty(value);\n            }\n            scanNext();\n            return true;\n        }\n        function parseLiteral() {\n            switch (_scanner.getToken()) {\n                case 11 /* NumericLiteral */:\n                    var tokenValue = _scanner.getTokenValue();\n                    var value = Number(tokenValue);\n                    if (isNaN(value)) {\n                        handleError(2 /* InvalidNumberFormat */);\n                        value = 0;\n                    }\n                    onLiteralValue(value);\n                    break;\n                case 7 /* NullKeyword */:\n                    onLiteralValue(null);\n                    break;\n                case 8 /* TrueKeyword */:\n                    onLiteralValue(true);\n                    break;\n                case 9 /* FalseKeyword */:\n                    onLiteralValue(false);\n                    break;\n                default:\n                    return false;\n            }\n            scanNext();\n            return true;\n        }\n        function parseProperty() {\n            if (_scanner.getToken() !== 10 /* StringLiteral */) {\n                handleError(3 /* PropertyNameExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n                return false;\n            }\n            parseString(false);\n            if (_scanner.getToken() === 6 /* ColonToken */) {\n                onSeparator(':');\n                scanNext(); // consume colon\n                if (!parseValue()) {\n                    handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n                }\n            }\n            else {\n                handleError(5 /* ColonExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n            return true;\n        }\n        function parseObject() {\n            onObjectBegin();\n            scanNext(); // consume open brace\n            var needsComma = false;\n            while (_scanner.getToken() !== 2 /* CloseBraceToken */ && _scanner.getToken() !== 17 /* EOF */) {\n                if (_scanner.getToken() === 5 /* CommaToken */) {\n                    if (!needsComma) {\n                        handleError(4 /* ValueExpected */, [], []);\n                    }\n                    onSeparator(',');\n                    scanNext(); // consume comma\n                    if (_scanner.getToken() === 2 /* CloseBraceToken */ && allowTrailingComma) {\n                        break;\n                    }\n                }\n                else if (needsComma) {\n                    handleError(6 /* CommaExpected */, [], []);\n                }\n                if (!parseProperty()) {\n                    handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n                }\n                needsComma = true;\n            }\n            onObjectEnd();\n            if (_scanner.getToken() !== 2 /* CloseBraceToken */) {\n                handleError(7 /* CloseBraceExpected */, [2 /* CloseBraceToken */], []);\n            }\n            else {\n                scanNext(); // consume close brace\n            }\n            return true;\n        }\n        function parseArray() {\n            onArrayBegin();\n            scanNext(); // consume open bracket\n            var needsComma = false;\n            while (_scanner.getToken() !== 4 /* CloseBracketToken */ && _scanner.getToken() !== 17 /* EOF */) {\n                if (_scanner.getToken() === 5 /* CommaToken */) {\n                    if (!needsComma) {\n                        handleError(4 /* ValueExpected */, [], []);\n                    }\n                    onSeparator(',');\n                    scanNext(); // consume comma\n                    if (_scanner.getToken() === 4 /* CloseBracketToken */ && allowTrailingComma) {\n                        break;\n                    }\n                }\n                else if (needsComma) {\n                    handleError(6 /* CommaExpected */, [], []);\n                }\n                if (!parseValue()) {\n                    handleError(4 /* ValueExpected */, [], [4 /* CloseBracketToken */, 5 /* CommaToken */]);\n                }\n                needsComma = true;\n            }\n            onArrayEnd();\n            if (_scanner.getToken() !== 4 /* CloseBracketToken */) {\n                handleError(8 /* CloseBracketExpected */, [4 /* CloseBracketToken */], []);\n            }\n            else {\n                scanNext(); // consume close bracket\n            }\n            return true;\n        }\n        function parseValue() {\n            switch (_scanner.getToken()) {\n                case 3 /* OpenBracketToken */:\n                    return parseArray();\n                case 1 /* OpenBraceToken */:\n                    return parseObject();\n                case 10 /* StringLiteral */:\n                    return parseString(true);\n                default:\n                    return parseLiteral();\n            }\n        }\n        scanNext();\n        if (_scanner.getToken() === 17 /* EOF */) {\n            if (options.allowEmptyContent) {\n                return true;\n            }\n            handleError(4 /* ValueExpected */, [], []);\n            return false;\n        }\n        if (!parseValue()) {\n            handleError(4 /* ValueExpected */, [], []);\n            return false;\n        }\n        if (_scanner.getToken() !== 17 /* EOF */) {\n            handleError(9 /* EndOfFileExpected */, [], []);\n        }\n        return true;\n    }\n    exports.visit = visit;\n    /**\n     * Takes JSON with JavaScript-style comments and remove\n     * them. Optionally replaces every none-newline character\n     * of comments with a replaceCharacter\n     */\n    function stripComments(text, replaceCh) {\n        var _scanner = scanner_1.createScanner(text), parts = [], kind, offset = 0, pos;\n        do {\n            pos = _scanner.getPosition();\n            kind = _scanner.scan();\n            switch (kind) {\n                case 12 /* LineCommentTrivia */:\n                case 13 /* BlockCommentTrivia */:\n                case 17 /* EOF */:\n                    if (offset !== pos) {\n                        parts.push(text.substring(offset, pos));\n                    }\n                    if (replaceCh !== undefined) {\n                        parts.push(_scanner.getTokenValue().replace(/[^\\r\\n]/g, replaceCh));\n                    }\n                    offset = _scanner.getPosition();\n                    break;\n            }\n        } while (kind !== 17 /* EOF */);\n        return parts.join('');\n    }\n    exports.stripComments = stripComments;\n    function getNodeType(value) {\n        switch (typeof value) {\n            case 'boolean': return 'boolean';\n            case 'number': return 'number';\n            case 'string': return 'string';\n            case 'object': {\n                if (!value) {\n                    return 'null';\n                }\n                else if (Array.isArray(value)) {\n                    return 'array';\n                }\n                return 'object';\n            }\n            default: return 'null';\n        }\n    }\n    exports.getNodeType = getNodeType;\n});\n"]}