{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar vscodeOniguruma = require('vscode-oniguruma');\nvar vscodeTextmate = require('vscode-textmate');\n\nconst themes = [\r\n    'css-variables',\r\n    'dark-plus',\r\n    'dracula-soft',\r\n    'dracula',\r\n    'github-dark-dimmed',\r\n    'github-dark',\r\n    'github-light',\r\n    'light-plus',\r\n    'material-darker',\r\n    'material-default',\r\n    'material-lighter',\r\n    'material-ocean',\r\n    'material-palenight',\r\n    'min-dark',\r\n    'min-light',\r\n    'monokai',\r\n    'nord',\r\n    'one-dark-pro',\r\n    'poimandres',\r\n    'rose-pine-dawn',\r\n    'rose-pine-moon',\r\n    'rose-pine',\r\n    'slack-dark',\r\n    'slack-ochin',\r\n    'solarized-dark',\r\n    'solarized-light',\r\n    'vitesse-dark',\r\n    'vitesse-light'\r\n];\n\nconst languages = [\r\n    {\r\n        id: 'abap',\r\n        scopeName: 'source.abap',\r\n        path: 'abap.tmLanguage.json',\r\n        samplePath: 'abap.sample'\r\n    },\r\n    {\r\n        id: 'actionscript-3',\r\n        scopeName: 'source.actionscript.3',\r\n        path: 'actionscript-3.tmLanguage.json',\r\n        samplePath: 'actionscript-3.sample'\r\n    },\r\n    {\r\n        id: 'ada',\r\n        scopeName: 'source.ada',\r\n        path: 'ada.tmLanguage.json',\r\n        samplePath: 'ada.sample'\r\n    },\r\n    {\r\n        id: 'apache',\r\n        scopeName: 'source.apacheconf',\r\n        path: 'apache.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'apex',\r\n        scopeName: 'source.apex',\r\n        path: 'apex.tmLanguage.json',\r\n        samplePath: 'apex.sample'\r\n    },\r\n    {\r\n        id: 'apl',\r\n        scopeName: 'source.apl',\r\n        path: 'apl.tmLanguage.json',\r\n        embeddedLangs: ['html', 'xml', 'css', 'javascript', 'json']\r\n    },\r\n    {\r\n        id: 'applescript',\r\n        scopeName: 'source.applescript',\r\n        path: 'applescript.tmLanguage.json',\r\n        samplePath: 'applescript.sample'\r\n    },\r\n    {\r\n        id: 'asm',\r\n        scopeName: 'source.asm.x86_64',\r\n        path: 'asm.tmLanguage.json',\r\n        samplePath: 'asm.sample'\r\n    },\r\n    {\r\n        id: 'astro',\r\n        scopeName: 'text.html.astro',\r\n        path: 'astro.tmLanguage.json',\r\n        samplePath: 'astro.sample',\r\n        embeddedLangs: ['css', 'javascript', 'less', 'sass', 'scss', 'stylus', 'typescript', 'tsx']\r\n    },\r\n    {\r\n        id: 'awk',\r\n        scopeName: 'source.awk',\r\n        path: 'awk.tmLanguage.json',\r\n        samplePath: 'awk.sample'\r\n    },\r\n    {\r\n        id: 'ballerina',\r\n        scopeName: 'source.ballerina',\r\n        path: 'ballerina.tmLanguage.json',\r\n        samplePath: 'ballerina.sample'\r\n    },\r\n    {\r\n        id: 'bat',\r\n        scopeName: 'source.batchfile',\r\n        path: 'bat.tmLanguage.json',\r\n        samplePath: 'bat.sample',\r\n        aliases: ['batch']\r\n    },\r\n    {\r\n        id: 'berry',\r\n        scopeName: 'source.berry',\r\n        path: 'berry.tmLanguage.json',\r\n        samplePath: 'berry.sample',\r\n        aliases: ['be']\r\n    },\r\n    {\r\n        id: 'bibtex',\r\n        scopeName: 'text.bibtex',\r\n        path: 'bibtex.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'bicep',\r\n        scopeName: 'source.bicep',\r\n        path: 'bicep.tmLanguage.json',\r\n        samplePath: 'bicep.sample'\r\n    },\r\n    {\r\n        id: 'c',\r\n        scopeName: 'source.c',\r\n        path: 'c.tmLanguage.json',\r\n        samplePath: 'c.sample'\r\n    },\r\n    {\r\n        id: 'clojure',\r\n        scopeName: 'source.clojure',\r\n        path: 'clojure.tmLanguage.json',\r\n        samplePath: 'clojure.sample',\r\n        aliases: ['clj']\r\n    },\r\n    {\r\n        id: 'cobol',\r\n        scopeName: 'source.cobol',\r\n        path: 'cobol.tmLanguage.json',\r\n        samplePath: 'cobol.sample',\r\n        embeddedLangs: ['sql', 'html', 'java']\r\n    },\r\n    {\r\n        id: 'codeql',\r\n        scopeName: 'source.ql',\r\n        path: 'codeql.tmLanguage.json',\r\n        samplePath: 'codeql.sample',\r\n        aliases: ['ql']\r\n    },\r\n    {\r\n        id: 'coffee',\r\n        scopeName: 'source.coffee',\r\n        path: 'coffee.tmLanguage.json',\r\n        samplePath: 'coffee.sample',\r\n        embeddedLangs: ['javascript']\r\n    },\r\n    {\r\n        id: 'cpp',\r\n        scopeName: 'source.cpp',\r\n        path: 'cpp.tmLanguage.json',\r\n        samplePath: 'cpp.sample',\r\n        embeddedLangs: ['sql']\r\n    },\r\n    {\r\n        id: 'crystal',\r\n        scopeName: 'source.crystal',\r\n        path: 'crystal.tmLanguage.json',\r\n        samplePath: 'crystal.sample',\r\n        embeddedLangs: ['html', 'sql', 'css', 'c', 'javascript', 'shellscript']\r\n    },\r\n    {\r\n        id: 'csharp',\r\n        scopeName: 'source.cs',\r\n        path: 'csharp.tmLanguage.json',\r\n        samplePath: 'csharp.sample',\r\n        aliases: ['c#']\r\n    },\r\n    {\r\n        id: 'css',\r\n        scopeName: 'source.css',\r\n        path: 'css.tmLanguage.json',\r\n        samplePath: 'css.sample'\r\n    },\r\n    {\r\n        id: 'cue',\r\n        scopeName: 'source.cue',\r\n        path: 'cue.tmLanguage.json',\r\n        samplePath: 'cue.sample'\r\n    },\r\n    {\r\n        id: 'd',\r\n        scopeName: 'source.d',\r\n        path: 'd.tmLanguage.json',\r\n        samplePath: 'd.sample'\r\n    },\r\n    {\r\n        id: 'dart',\r\n        scopeName: 'source.dart',\r\n        path: 'dart.tmLanguage.json',\r\n        samplePath: 'dart.sample'\r\n    },\r\n    {\r\n        id: 'diff',\r\n        scopeName: 'source.diff',\r\n        path: 'diff.tmLanguage.json',\r\n        samplePath: 'diff.sample'\r\n    },\r\n    {\r\n        id: 'docker',\r\n        scopeName: 'source.dockerfile',\r\n        path: 'docker.tmLanguage.json',\r\n        samplePath: 'docker.sample'\r\n    },\r\n    {\r\n        id: 'dream-maker',\r\n        scopeName: 'source.dm',\r\n        path: 'dream-maker.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'elixir',\r\n        scopeName: 'source.elixir',\r\n        path: 'elixir.tmLanguage.json',\r\n        samplePath: 'elixir.sample',\r\n        embeddedLangs: ['html']\r\n    },\r\n    {\r\n        id: 'elm',\r\n        scopeName: 'source.elm',\r\n        path: 'elm.tmLanguage.json',\r\n        samplePath: 'elm.sample'\r\n    },\r\n    {\r\n        id: 'erb',\r\n        scopeName: 'text.html.erb',\r\n        path: 'erb.tmLanguage.json',\r\n        samplePath: 'erb.sample',\r\n        embeddedLangs: ['html', 'ruby']\r\n    },\r\n    {\r\n        id: 'erlang',\r\n        scopeName: 'source.erlang',\r\n        path: 'erlang.tmLanguage.json',\r\n        samplePath: 'erlang.sample'\r\n    },\r\n    {\r\n        id: 'fish',\r\n        scopeName: 'source.fish',\r\n        path: 'fish.tmLanguage.json',\r\n        samplePath: 'fish.sample'\r\n    },\r\n    {\r\n        id: 'fsharp',\r\n        scopeName: 'source.fsharp',\r\n        path: 'fsharp.tmLanguage.json',\r\n        samplePath: 'fsharp.sample',\r\n        aliases: ['f#'],\r\n        embeddedLangs: ['markdown']\r\n    },\r\n    {\r\n        id: 'gherkin',\r\n        scopeName: 'text.gherkin.feature',\r\n        path: 'gherkin.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'git-commit',\r\n        scopeName: 'text.git-commit',\r\n        path: 'git-commit.tmLanguage.json',\r\n        embeddedLangs: ['diff']\r\n    },\r\n    {\r\n        id: 'git-rebase',\r\n        scopeName: 'text.git-rebase',\r\n        path: 'git-rebase.tmLanguage.json',\r\n        embeddedLangs: ['shellscript']\r\n    },\r\n    {\r\n        id: 'gnuplot',\r\n        scopeName: 'source.gnuplot',\r\n        path: 'gnuplot.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'go',\r\n        scopeName: 'source.go',\r\n        path: 'go.tmLanguage.json',\r\n        samplePath: 'go.sample'\r\n    },\r\n    {\r\n        id: 'graphql',\r\n        scopeName: 'source.graphql',\r\n        path: 'graphql.tmLanguage.json',\r\n        embeddedLangs: ['javascript', 'typescript', 'jsx', 'tsx']\r\n    },\r\n    {\r\n        id: 'groovy',\r\n        scopeName: 'source.groovy',\r\n        path: 'groovy.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'hack',\r\n        scopeName: 'source.hack',\r\n        path: 'hack.tmLanguage.json',\r\n        embeddedLangs: ['html', 'sql']\r\n    },\r\n    {\r\n        id: 'haml',\r\n        scopeName: 'text.haml',\r\n        path: 'haml.tmLanguage.json',\r\n        embeddedLangs: ['ruby', 'javascript', 'sass', 'coffee', 'markdown', 'css']\r\n    },\r\n    {\r\n        id: 'handlebars',\r\n        scopeName: 'text.html.handlebars',\r\n        path: 'handlebars.tmLanguage.json',\r\n        aliases: ['hbs'],\r\n        embeddedLangs: ['html', 'css', 'javascript', 'yaml']\r\n    },\r\n    {\r\n        id: 'haskell',\r\n        scopeName: 'source.haskell',\r\n        path: 'haskell.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'hcl',\r\n        scopeName: 'source.hcl',\r\n        path: 'hcl.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'hlsl',\r\n        scopeName: 'source.hlsl',\r\n        path: 'hlsl.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'html',\r\n        scopeName: 'text.html.basic',\r\n        path: 'html.tmLanguage.json',\r\n        samplePath: 'html.sample',\r\n        embeddedLangs: ['javascript', 'css']\r\n    },\r\n    {\r\n        id: 'ini',\r\n        scopeName: 'source.ini',\r\n        path: 'ini.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'java',\r\n        scopeName: 'source.java',\r\n        path: 'java.tmLanguage.json',\r\n        samplePath: 'java.sample'\r\n    },\r\n    {\r\n        id: 'javascript',\r\n        scopeName: 'source.js',\r\n        path: 'javascript.tmLanguage.json',\r\n        samplePath: 'javascript.sample',\r\n        aliases: ['js']\r\n    },\r\n    {\r\n        id: 'jinja-html',\r\n        scopeName: 'text.html.jinja',\r\n        path: 'jinja-html.tmLanguage.json',\r\n        embeddedLangs: ['html']\r\n    },\r\n    {\r\n        id: 'json',\r\n        scopeName: 'source.json',\r\n        path: 'json.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'jsonc',\r\n        scopeName: 'source.json.comments',\r\n        path: 'jsonc.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'jsonnet',\r\n        scopeName: 'source.jsonnet',\r\n        path: 'jsonnet.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'jssm',\r\n        scopeName: 'source.jssm',\r\n        path: 'jssm.tmLanguage.json',\r\n        samplePath: 'jssm.sample',\r\n        aliases: ['fsl']\r\n    },\r\n    {\r\n        id: 'jsx',\r\n        scopeName: 'source.js.jsx',\r\n        path: 'jsx.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'julia',\r\n        scopeName: 'source.julia',\r\n        path: 'julia.tmLanguage.json',\r\n        embeddedLangs: ['cpp', 'python', 'javascript', 'r', 'sql']\r\n    },\r\n    {\r\n        id: 'jupyter',\r\n        scopeName: 'source.jupyter',\r\n        path: 'jupyter.tmLanguage.json',\r\n        embeddedLangs: ['json']\r\n    },\r\n    {\r\n        id: 'kotlin',\r\n        scopeName: 'source.kotlin',\r\n        path: 'kotlin.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'latex',\r\n        scopeName: 'text.tex.latex',\r\n        path: 'latex.tmLanguage.json',\r\n        embeddedLangs: ['tex', 'css', 'html', 'java', 'javascript', 'typescript', 'lua', 'python', 'julia', 'ruby', 'xml', 'yaml', 'cpp', 'haskell', 'scala', 'gnuplot']\r\n    },\r\n    {\r\n        id: 'less',\r\n        scopeName: 'source.css.less',\r\n        path: 'less.tmLanguage.json',\r\n        embeddedLangs: ['css']\r\n    },\r\n    {\r\n        id: 'lisp',\r\n        scopeName: 'source.lisp',\r\n        path: 'lisp.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'logo',\r\n        scopeName: 'source.logo',\r\n        path: 'logo.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'lua',\r\n        scopeName: 'source.lua',\r\n        path: 'lua.tmLanguage.json',\r\n        embeddedLangs: ['c']\r\n    },\r\n    {\r\n        id: 'make',\r\n        scopeName: 'source.makefile',\r\n        path: 'make.tmLanguage.json',\r\n        aliases: ['makefile']\r\n    },\r\n    {\r\n        id: 'markdown',\r\n        scopeName: 'text.html.markdown',\r\n        path: 'markdown.tmLanguage.json',\r\n        aliases: ['md'],\r\n        embeddedLangs: ['css', 'html', 'ini', 'java', 'lua', 'make', 'perl', 'r', 'ruby', 'php', 'sql', 'vb', 'xml', 'xsl', 'yaml', 'bat', 'clojure', 'coffee', 'c', 'cpp', 'diff', 'docker', 'git-commit', 'git-rebase', 'go', 'groovy', 'pug', 'javascript', 'json', 'jsonc', 'less', 'objective-c', 'swift', 'scss', 'raku', 'powershell', 'python', 'rust', 'scala', 'shellscript', 'typescript', 'tsx', 'csharp', 'fsharp', 'dart', 'handlebars', 'erlang', 'elixir', 'latex', 'bibtex']\r\n    },\r\n    {\r\n        id: 'marko',\r\n        scopeName: 'text.marko',\r\n        path: 'marko.tmLanguage.json',\r\n        samplePath: 'marko.sample',\r\n        embeddedLangs: ['css', 'less', 'scss', 'javascript']\r\n    },\r\n    {\r\n        id: 'matlab',\r\n        scopeName: 'source.matlab',\r\n        path: 'matlab.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'mdx',\r\n        scopeName: 'text.html.markdown.jsx',\r\n        path: 'mdx.tmLanguage.json',\r\n        embeddedLangs: ['jsx', 'markdown']\r\n    },\r\n    {\r\n        id: 'nginx',\r\n        scopeName: 'source.nginx',\r\n        path: 'nginx.tmLanguage.json',\r\n        embeddedLangs: ['lua']\r\n    },\r\n    {\r\n        id: 'nim',\r\n        scopeName: 'source.nim',\r\n        path: 'nim.tmLanguage.json',\r\n        embeddedLangs: ['c', 'html', 'xml', 'javascript', 'css', 'markdown']\r\n    },\r\n    {\r\n        id: 'nix',\r\n        scopeName: 'source.nix',\r\n        path: 'nix.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'objective-c',\r\n        scopeName: 'source.objc',\r\n        path: 'objective-c.tmLanguage.json',\r\n        aliases: ['objc']\r\n    },\r\n    {\r\n        id: 'objective-cpp',\r\n        scopeName: 'source.objcpp',\r\n        path: 'objective-cpp.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'ocaml',\r\n        scopeName: 'source.ocaml',\r\n        path: 'ocaml.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'pascal',\r\n        scopeName: 'source.pascal',\r\n        path: 'pascal.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'perl',\r\n        scopeName: 'source.perl',\r\n        path: 'perl.tmLanguage.json',\r\n        embeddedLangs: ['html', 'xml', 'css', 'javascript', 'sql']\r\n    },\r\n    {\r\n        id: 'php',\r\n        scopeName: 'source.php',\r\n        path: 'php.tmLanguage.json',\r\n        embeddedLangs: ['html', 'xml', 'sql', 'javascript', 'json', 'css']\r\n    },\r\n    {\r\n        id: 'plsql',\r\n        scopeName: 'source.plsql.oracle',\r\n        path: 'plsql.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'postcss',\r\n        scopeName: 'source.css.postcss',\r\n        path: 'postcss.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'powershell',\r\n        scopeName: 'source.powershell',\r\n        path: 'powershell.tmLanguage.json',\r\n        aliases: ['ps', 'ps1']\r\n    },\r\n    {\r\n        id: 'prisma',\r\n        scopeName: 'source.prisma',\r\n        path: 'prisma.tmLanguage.json',\r\n        samplePath: 'prisma.sample'\r\n    },\r\n    {\r\n        id: 'prolog',\r\n        scopeName: 'source.prolog',\r\n        path: 'prolog.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'pug',\r\n        scopeName: 'text.pug',\r\n        path: 'pug.tmLanguage.json',\r\n        aliases: ['jade'],\r\n        embeddedLangs: ['javascript', 'css', 'sass', 'stylus', 'coffee', 'html']\r\n    },\r\n    {\r\n        id: 'puppet',\r\n        scopeName: 'source.puppet',\r\n        path: 'puppet.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'purescript',\r\n        scopeName: 'source.purescript',\r\n        path: 'purescript.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'python',\r\n        scopeName: 'source.python',\r\n        path: 'python.tmLanguage.json',\r\n        samplePath: 'python.sample',\r\n        aliases: ['py']\r\n    },\r\n    {\r\n        id: 'r',\r\n        scopeName: 'source.r',\r\n        path: 'r.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'raku',\r\n        scopeName: 'source.perl.6',\r\n        path: 'raku.tmLanguage.json',\r\n        aliases: ['perl6']\r\n    },\r\n    {\r\n        id: 'razor',\r\n        scopeName: 'text.aspnetcorerazor',\r\n        path: 'razor.tmLanguage.json',\r\n        embeddedLangs: ['html', 'csharp']\r\n    },\r\n    {\r\n        id: 'rel',\r\n        scopeName: 'source.rel',\r\n        path: 'rel.tmLanguage.json',\r\n        samplePath: 'rel.sample'\r\n    },\r\n    {\r\n        id: 'riscv',\r\n        scopeName: 'source.riscv',\r\n        path: 'riscv.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'ruby',\r\n        scopeName: 'source.ruby',\r\n        path: 'ruby.tmLanguage.json',\r\n        samplePath: 'ruby.sample',\r\n        aliases: ['rb'],\r\n        embeddedLangs: ['html', 'xml', 'sql', 'css', 'c', 'javascript', 'shellscript', 'lua']\r\n    },\r\n    {\r\n        id: 'rust',\r\n        scopeName: 'source.rust',\r\n        path: 'rust.tmLanguage.json',\r\n        aliases: ['rs']\r\n    },\r\n    {\r\n        id: 'sas',\r\n        scopeName: 'source.sas',\r\n        path: 'sas.tmLanguage.json',\r\n        embeddedLangs: ['sql']\r\n    },\r\n    {\r\n        id: 'sass',\r\n        scopeName: 'source.sass',\r\n        path: 'sass.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'scala',\r\n        scopeName: 'source.scala',\r\n        path: 'scala.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'scheme',\r\n        scopeName: 'source.scheme',\r\n        path: 'scheme.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'scss',\r\n        scopeName: 'source.css.scss',\r\n        path: 'scss.tmLanguage.json',\r\n        embeddedLangs: ['css']\r\n    },\r\n    {\r\n        id: 'shaderlab',\r\n        scopeName: 'source.shaderlab',\r\n        path: 'shaderlab.tmLanguage.json',\r\n        aliases: ['shader'],\r\n        embeddedLangs: ['hlsl']\r\n    },\r\n    {\r\n        id: 'shellscript',\r\n        scopeName: 'source.shell',\r\n        path: 'shellscript.tmLanguage.json',\r\n        aliases: ['shell', 'bash', 'sh', 'zsh'],\r\n        embeddedLangs: ['ruby', 'python', 'applescript', 'html', 'markdown']\r\n    },\r\n    {\r\n        id: 'smalltalk',\r\n        scopeName: 'source.smalltalk',\r\n        path: 'smalltalk.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'solidity',\r\n        scopeName: 'source.solidity',\r\n        path: 'solidity.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'sparql',\r\n        scopeName: 'source.sparql',\r\n        path: 'sparql.tmLanguage.json',\r\n        samplePath: 'sparql.sample',\r\n        embeddedLangs: ['turtle']\r\n    },\r\n    {\r\n        id: 'sql',\r\n        scopeName: 'source.sql',\r\n        path: 'sql.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'ssh-config',\r\n        scopeName: 'source.ssh-config',\r\n        path: 'ssh-config.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'stata',\r\n        scopeName: 'source.stata',\r\n        path: 'stata.tmLanguage.json',\r\n        samplePath: 'stata.sample',\r\n        embeddedLangs: ['sql']\r\n    },\r\n    {\r\n        id: 'stylus',\r\n        scopeName: 'source.stylus',\r\n        path: 'stylus.tmLanguage.json',\r\n        aliases: ['styl']\r\n    },\r\n    {\r\n        id: 'svelte',\r\n        scopeName: 'source.svelte',\r\n        path: 'svelte.tmLanguage.json',\r\n        embeddedLangs: ['javascript', 'typescript', 'coffee', 'stylus', 'sass', 'css', 'scss', 'less', 'postcss', 'pug', 'markdown']\r\n    },\r\n    {\r\n        id: 'swift',\r\n        scopeName: 'source.swift',\r\n        path: 'swift.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'system-verilog',\r\n        scopeName: 'source.systemverilog',\r\n        path: 'system-verilog.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'tasl',\r\n        scopeName: 'source.tasl',\r\n        path: 'tasl.tmLanguage.json',\r\n        samplePath: 'tasl.sample'\r\n    },\r\n    {\r\n        id: 'tcl',\r\n        scopeName: 'source.tcl',\r\n        path: 'tcl.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'tex',\r\n        scopeName: 'text.tex',\r\n        path: 'tex.tmLanguage.json',\r\n        embeddedLangs: ['r']\r\n    },\r\n    {\r\n        id: 'toml',\r\n        scopeName: 'source.toml',\r\n        path: 'toml.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'tsx',\r\n        scopeName: 'source.tsx',\r\n        path: 'tsx.tmLanguage.json',\r\n        samplePath: 'tsx.sample'\r\n    },\r\n    {\r\n        id: 'turtle',\r\n        scopeName: 'source.turtle',\r\n        path: 'turtle.tmLanguage.json',\r\n        samplePath: 'turtle.sample'\r\n    },\r\n    {\r\n        id: 'twig',\r\n        scopeName: 'text.html.twig',\r\n        path: 'twig.tmLanguage.json',\r\n        embeddedLangs: ['css', 'javascript', 'php', 'python', 'ruby']\r\n    },\r\n    {\r\n        id: 'typescript',\r\n        scopeName: 'source.ts',\r\n        path: 'typescript.tmLanguage.json',\r\n        aliases: ['ts']\r\n    },\r\n    {\r\n        id: 'vb',\r\n        scopeName: 'source.asp.vb.net',\r\n        path: 'vb.tmLanguage.json',\r\n        aliases: ['cmd']\r\n    },\r\n    {\r\n        id: 'verilog',\r\n        scopeName: 'source.verilog',\r\n        path: 'verilog.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'vhdl',\r\n        scopeName: 'source.vhdl',\r\n        path: 'vhdl.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'viml',\r\n        scopeName: 'source.viml',\r\n        path: 'viml.tmLanguage.json',\r\n        aliases: ['vim', 'vimscript']\r\n    },\r\n    {\r\n        id: 'vue-html',\r\n        scopeName: 'text.html.vue-html',\r\n        path: 'vue-html.tmLanguage.json',\r\n        embeddedLangs: ['vue', 'javascript']\r\n    },\r\n    {\r\n        id: 'vue',\r\n        scopeName: 'source.vue',\r\n        path: 'vue.tmLanguage.json',\r\n        embeddedLangs: ['json', 'markdown', 'pug', 'haml', 'vue-html', 'sass', 'scss', 'less', 'stylus', 'postcss', 'css', 'typescript', 'coffee', 'javascript']\r\n    },\r\n    {\r\n        id: 'wasm',\r\n        scopeName: 'source.wat',\r\n        path: 'wasm.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'wenyan',\r\n        scopeName: 'source.wenyan',\r\n        path: 'wenyan.tmLanguage.json',\r\n        aliases: ['文言']\r\n    },\r\n    {\r\n        id: 'xml',\r\n        scopeName: 'text.xml',\r\n        path: 'xml.tmLanguage.json',\r\n        embeddedLangs: ['java']\r\n    },\r\n    {\r\n        id: 'xsl',\r\n        scopeName: 'text.xml.xsl',\r\n        path: 'xsl.tmLanguage.json',\r\n        embeddedLangs: ['xml']\r\n    },\r\n    {\r\n        id: 'yaml',\r\n        scopeName: 'source.yaml',\r\n        path: 'yaml.tmLanguage.json'\r\n    },\r\n    {\r\n        id: 'zenscript',\r\n        scopeName: 'source.zenscript',\r\n        path: 'zenscript.tmLanguage.json',\r\n        samplePath: 'zenscript.sample'\r\n    }\r\n];\n\nexports.FontStyle = void 0;\r\n(function (FontStyle) {\r\n    FontStyle[FontStyle[\"NotSet\"] = -1] = \"NotSet\";\r\n    FontStyle[FontStyle[\"None\"] = 0] = \"None\";\r\n    FontStyle[FontStyle[\"Italic\"] = 1] = \"Italic\";\r\n    FontStyle[FontStyle[\"Bold\"] = 2] = \"Bold\";\r\n    FontStyle[FontStyle[\"Underline\"] = 4] = \"Underline\";\r\n})(exports.FontStyle || (exports.FontStyle = {}));\r\nclass StackElementMetadata {\r\n    static toBinaryStr(metadata) {\r\n        let r = metadata.toString(2);\r\n        while (r.length < 32) {\r\n            r = '0' + r;\r\n        }\r\n        return r;\r\n    }\r\n    static printMetadata(metadata) {\r\n        let languageId = StackElementMetadata.getLanguageId(metadata);\r\n        let tokenType = StackElementMetadata.getTokenType(metadata);\r\n        let fontStyle = StackElementMetadata.getFontStyle(metadata);\r\n        let foreground = StackElementMetadata.getForeground(metadata);\r\n        let background = StackElementMetadata.getBackground(metadata);\r\n        console.log({\r\n            languageId: languageId,\r\n            tokenType: tokenType,\r\n            fontStyle: fontStyle,\r\n            foreground: foreground,\r\n            background: background\r\n        });\r\n    }\r\n    static getLanguageId(metadata) {\r\n        return (metadata & 255 /* LANGUAGEID_MASK */) >>> 0 /* LANGUAGEID_OFFSET */;\r\n    }\r\n    static getTokenType(metadata) {\r\n        return (metadata & 1792 /* TOKEN_TYPE_MASK */) >>> 8 /* TOKEN_TYPE_OFFSET */;\r\n    }\r\n    static getFontStyle(metadata) {\r\n        return (metadata & 14336 /* FONT_STYLE_MASK */) >>> 11 /* FONT_STYLE_OFFSET */;\r\n    }\r\n    static getForeground(metadata) {\r\n        return (metadata & 8372224 /* FOREGROUND_MASK */) >>> 14 /* FOREGROUND_OFFSET */;\r\n    }\r\n    static getBackground(metadata) {\r\n        return (metadata & 4286578688 /* BACKGROUND_MASK */) >>> 23 /* BACKGROUND_OFFSET */;\r\n    }\r\n    static set(metadata, languageId, tokenType, fontStyle, foreground, background) {\r\n        let _languageId = StackElementMetadata.getLanguageId(metadata);\r\n        let _tokenType = StackElementMetadata.getTokenType(metadata);\r\n        let _fontStyle = StackElementMetadata.getFontStyle(metadata);\r\n        let _foreground = StackElementMetadata.getForeground(metadata);\r\n        let _background = StackElementMetadata.getBackground(metadata);\r\n        if (languageId !== 0) {\r\n            _languageId = languageId;\r\n        }\r\n        if (tokenType !== 0 /* Other */) {\r\n            _tokenType =\r\n                tokenType === 8 /* MetaEmbedded */ ? 0 /* Other */ : tokenType;\r\n        }\r\n        if (fontStyle !== exports.FontStyle.NotSet) {\r\n            _fontStyle = fontStyle;\r\n        }\r\n        if (foreground !== 0) {\r\n            _foreground = foreground;\r\n        }\r\n        if (background !== 0) {\r\n            _background = background;\r\n        }\r\n        return (((_languageId << 0 /* LANGUAGEID_OFFSET */) |\r\n            (_tokenType << 8 /* TOKEN_TYPE_OFFSET */) |\r\n            (_fontStyle << 11 /* FONT_STYLE_OFFSET */) |\r\n            (_foreground << 14 /* FOREGROUND_OFFSET */) |\r\n            (_background << 23 /* BACKGROUND_OFFSET */)) >>>\r\n            0);\r\n    }\r\n}\n\nfunction trimEndSlash(str) {\r\n    if (str.endsWith('/') || str.endsWith('\\\\'))\r\n        return str.slice(0, -1);\r\n    return str;\r\n}\r\nfunction trimStartDot(str) {\r\n    if (str.startsWith('./'))\r\n        return str.slice(2);\r\n    return str;\r\n}\r\nfunction dirname(str) {\r\n    const parts = str.split(/[\\/\\\\]/g);\r\n    return parts[parts.length - 2];\r\n}\r\nfunction join(...parts) {\r\n    return parts.map(trimEndSlash).map(trimStartDot).join('/');\r\n}\r\nfunction groupBy(elements, keyGetter) {\r\n    const map = new Map();\r\n    for (const element of elements) {\r\n        const key = keyGetter(element);\r\n        if (map.has(key)) {\r\n            const group = map.get(key);\r\n            group.push(element);\r\n        }\r\n        else {\r\n            map.set(key, [element]);\r\n        }\r\n    }\r\n    return map;\r\n}\n\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nfunction createScanner(text, ignoreTrivia) {\n    if (ignoreTrivia === void 0) { ignoreTrivia = false; }\n    var len = text.length;\n    var pos = 0, value = '', tokenOffset = 0, token = 16 /* Unknown */, lineNumber = 0, lineStartOffset = 0, tokenLineStartOffset = 0, prevTokenLineStartOffset = 0, scanError = 0 /* None */;\n    function scanHexDigits(count, exact) {\n        var digits = 0;\n        var value = 0;\n        while (digits < count || !exact) {\n            var ch = text.charCodeAt(pos);\n            if (ch >= 48 /* _0 */ && ch <= 57 /* _9 */) {\n                value = value * 16 + ch - 48 /* _0 */;\n            }\n            else if (ch >= 65 /* A */ && ch <= 70 /* F */) {\n                value = value * 16 + ch - 65 /* A */ + 10;\n            }\n            else if (ch >= 97 /* a */ && ch <= 102 /* f */) {\n                value = value * 16 + ch - 97 /* a */ + 10;\n            }\n            else {\n                break;\n            }\n            pos++;\n            digits++;\n        }\n        if (digits < count) {\n            value = -1;\n        }\n        return value;\n    }\n    function setPosition(newPosition) {\n        pos = newPosition;\n        value = '';\n        tokenOffset = 0;\n        token = 16 /* Unknown */;\n        scanError = 0 /* None */;\n    }\n    function scanNumber() {\n        var start = pos;\n        if (text.charCodeAt(pos) === 48 /* _0 */) {\n            pos++;\n        }\n        else {\n            pos++;\n            while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n            }\n        }\n        if (pos < text.length && text.charCodeAt(pos) === 46 /* dot */) {\n            pos++;\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n                return text.substring(start, pos);\n            }\n        }\n        var end = pos;\n        if (pos < text.length && (text.charCodeAt(pos) === 69 /* E */ || text.charCodeAt(pos) === 101 /* e */)) {\n            pos++;\n            if (pos < text.length && text.charCodeAt(pos) === 43 /* plus */ || text.charCodeAt(pos) === 45 /* minus */) {\n                pos++;\n            }\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n                end = pos;\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n            }\n        }\n        return text.substring(start, end);\n    }\n    function scanString() {\n        var result = '', start = pos;\n        while (true) {\n            if (pos >= len) {\n                result += text.substring(start, pos);\n                scanError = 2 /* UnexpectedEndOfString */;\n                break;\n            }\n            var ch = text.charCodeAt(pos);\n            if (ch === 34 /* doubleQuote */) {\n                result += text.substring(start, pos);\n                pos++;\n                break;\n            }\n            if (ch === 92 /* backslash */) {\n                result += text.substring(start, pos);\n                pos++;\n                if (pos >= len) {\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                var ch2 = text.charCodeAt(pos++);\n                switch (ch2) {\n                    case 34 /* doubleQuote */:\n                        result += '\\\"';\n                        break;\n                    case 92 /* backslash */:\n                        result += '\\\\';\n                        break;\n                    case 47 /* slash */:\n                        result += '/';\n                        break;\n                    case 98 /* b */:\n                        result += '\\b';\n                        break;\n                    case 102 /* f */:\n                        result += '\\f';\n                        break;\n                    case 110 /* n */:\n                        result += '\\n';\n                        break;\n                    case 114 /* r */:\n                        result += '\\r';\n                        break;\n                    case 116 /* t */:\n                        result += '\\t';\n                        break;\n                    case 117 /* u */:\n                        var ch3 = scanHexDigits(4, true);\n                        if (ch3 >= 0) {\n                            result += String.fromCharCode(ch3);\n                        }\n                        else {\n                            scanError = 4 /* InvalidUnicode */;\n                        }\n                        break;\n                    default:\n                        scanError = 5 /* InvalidEscapeCharacter */;\n                }\n                start = pos;\n                continue;\n            }\n            if (ch >= 0 && ch <= 0x1f) {\n                if (isLineBreak(ch)) {\n                    result += text.substring(start, pos);\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                else {\n                    scanError = 6 /* InvalidCharacter */;\n                    // mark as error but continue with string\n                }\n            }\n            pos++;\n        }\n        return result;\n    }\n    function scanNext() {\n        value = '';\n        scanError = 0 /* None */;\n        tokenOffset = pos;\n        lineStartOffset = lineNumber;\n        prevTokenLineStartOffset = tokenLineStartOffset;\n        if (pos >= len) {\n            // at the end\n            tokenOffset = len;\n            return token = 17 /* EOF */;\n        }\n        var code = text.charCodeAt(pos);\n        // trivia: whitespace\n        if (isWhiteSpace(code)) {\n            do {\n                pos++;\n                value += String.fromCharCode(code);\n                code = text.charCodeAt(pos);\n            } while (isWhiteSpace(code));\n            return token = 15 /* Trivia */;\n        }\n        // trivia: newlines\n        if (isLineBreak(code)) {\n            pos++;\n            value += String.fromCharCode(code);\n            if (code === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                pos++;\n                value += '\\n';\n            }\n            lineNumber++;\n            tokenLineStartOffset = pos;\n            return token = 14 /* LineBreakTrivia */;\n        }\n        switch (code) {\n            // tokens: []{}:,\n            case 123 /* openBrace */:\n                pos++;\n                return token = 1 /* OpenBraceToken */;\n            case 125 /* closeBrace */:\n                pos++;\n                return token = 2 /* CloseBraceToken */;\n            case 91 /* openBracket */:\n                pos++;\n                return token = 3 /* OpenBracketToken */;\n            case 93 /* closeBracket */:\n                pos++;\n                return token = 4 /* CloseBracketToken */;\n            case 58 /* colon */:\n                pos++;\n                return token = 6 /* ColonToken */;\n            case 44 /* comma */:\n                pos++;\n                return token = 5 /* CommaToken */;\n            // strings\n            case 34 /* doubleQuote */:\n                pos++;\n                value = scanString();\n                return token = 10 /* StringLiteral */;\n            // comments\n            case 47 /* slash */:\n                var start = pos - 1;\n                // Single-line comment\n                if (text.charCodeAt(pos + 1) === 47 /* slash */) {\n                    pos += 2;\n                    while (pos < len) {\n                        if (isLineBreak(text.charCodeAt(pos))) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 12 /* LineCommentTrivia */;\n                }\n                // Multi-line comment\n                if (text.charCodeAt(pos + 1) === 42 /* asterisk */) {\n                    pos += 2;\n                    var safeLength = len - 1; // For lookahead.\n                    var commentClosed = false;\n                    while (pos < safeLength) {\n                        var ch = text.charCodeAt(pos);\n                        if (ch === 42 /* asterisk */ && text.charCodeAt(pos + 1) === 47 /* slash */) {\n                            pos += 2;\n                            commentClosed = true;\n                            break;\n                        }\n                        pos++;\n                        if (isLineBreak(ch)) {\n                            if (ch === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                                pos++;\n                            }\n                            lineNumber++;\n                            tokenLineStartOffset = pos;\n                        }\n                    }\n                    if (!commentClosed) {\n                        pos++;\n                        scanError = 1 /* UnexpectedEndOfComment */;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 13 /* BlockCommentTrivia */;\n                }\n                // just a single slash\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n            // numbers\n            case 45 /* minus */:\n                value += String.fromCharCode(code);\n                pos++;\n                if (pos === len || !isDigit(text.charCodeAt(pos))) {\n                    return token = 16 /* Unknown */;\n                }\n            // found a minus, followed by a number so\n            // we fall through to proceed with scanning\n            // numbers\n            case 48 /* _0 */:\n            case 49 /* _1 */:\n            case 50 /* _2 */:\n            case 51 /* _3 */:\n            case 52 /* _4 */:\n            case 53 /* _5 */:\n            case 54 /* _6 */:\n            case 55 /* _7 */:\n            case 56 /* _8 */:\n            case 57 /* _9 */:\n                value += scanNumber();\n                return token = 11 /* NumericLiteral */;\n            // literals and unknown symbols\n            default:\n                // is a literal? Read the full word.\n                while (pos < len && isUnknownContentCharacter(code)) {\n                    pos++;\n                    code = text.charCodeAt(pos);\n                }\n                if (tokenOffset !== pos) {\n                    value = text.substring(tokenOffset, pos);\n                    // keywords: true, false, null\n                    switch (value) {\n                        case 'true': return token = 8 /* TrueKeyword */;\n                        case 'false': return token = 9 /* FalseKeyword */;\n                        case 'null': return token = 7 /* NullKeyword */;\n                    }\n                    return token = 16 /* Unknown */;\n                }\n                // some\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n        }\n    }\n    function isUnknownContentCharacter(code) {\n        if (isWhiteSpace(code) || isLineBreak(code)) {\n            return false;\n        }\n        switch (code) {\n            case 125 /* closeBrace */:\n            case 93 /* closeBracket */:\n            case 123 /* openBrace */:\n            case 91 /* openBracket */:\n            case 34 /* doubleQuote */:\n            case 58 /* colon */:\n            case 44 /* comma */:\n            case 47 /* slash */:\n                return false;\n        }\n        return true;\n    }\n    function scanNextNonTrivia() {\n        var result;\n        do {\n            result = scanNext();\n        } while (result >= 12 /* LineCommentTrivia */ && result <= 15 /* Trivia */);\n        return result;\n    }\n    return {\n        setPosition: setPosition,\n        getPosition: function () { return pos; },\n        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n        getToken: function () { return token; },\n        getTokenValue: function () { return value; },\n        getTokenOffset: function () { return tokenOffset; },\n        getTokenLength: function () { return pos - tokenOffset; },\n        getTokenStartLine: function () { return lineStartOffset; },\n        getTokenStartCharacter: function () { return tokenOffset - prevTokenLineStartOffset; },\n        getTokenError: function () { return scanError; },\n    };\n}\nfunction isWhiteSpace(ch) {\n    return ch === 32 /* space */ || ch === 9 /* tab */ || ch === 11 /* verticalTab */ || ch === 12 /* formFeed */ ||\n        ch === 160 /* nonBreakingSpace */ || ch === 5760 /* ogham */ || ch >= 8192 /* enQuad */ && ch <= 8203 /* zeroWidthSpace */ ||\n        ch === 8239 /* narrowNoBreakSpace */ || ch === 8287 /* mathematicalSpace */ || ch === 12288 /* ideographicSpace */ || ch === 65279 /* byteOrderMark */;\n}\nfunction isLineBreak(ch) {\n    return ch === 10 /* lineFeed */ || ch === 13 /* carriageReturn */ || ch === 8232 /* lineSeparator */ || ch === 8233 /* paragraphSeparator */;\n}\nfunction isDigit(ch) {\n    return ch >= 48 /* _0 */ && ch <= 57 /* _9 */;\n}\n\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar ParseOptions;\n(function (ParseOptions) {\n    ParseOptions.DEFAULT = {\n        allowTrailingComma: false\n    };\n})(ParseOptions || (ParseOptions = {}));\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nfunction parse$1(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    if (options === void 0) { options = ParseOptions.DEFAULT; }\n    var currentProperty = null;\n    var currentParent = [];\n    var previousParents = [];\n    function onValue(value) {\n        if (Array.isArray(currentParent)) {\n            currentParent.push(value);\n        }\n        else if (currentProperty !== null) {\n            currentParent[currentProperty] = value;\n        }\n    }\n    var visitor = {\n        onObjectBegin: function () {\n            var object = {};\n            onValue(object);\n            previousParents.push(currentParent);\n            currentParent = object;\n            currentProperty = null;\n        },\n        onObjectProperty: function (name) {\n            currentProperty = name;\n        },\n        onObjectEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onArrayBegin: function () {\n            var array = [];\n            onValue(array);\n            previousParents.push(currentParent);\n            currentParent = array;\n            currentProperty = null;\n        },\n        onArrayEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onLiteralValue: onValue,\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    return currentParent[0];\n}\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nfunction visit(text, visitor, options) {\n    if (options === void 0) { options = ParseOptions.DEFAULT; }\n    var _scanner = createScanner(text, false);\n    function toNoArgVisit(visitFunction) {\n        return visitFunction ? function () { return visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()); } : function () { return true; };\n    }\n    function toOneArgVisit(visitFunction) {\n        return visitFunction ? function (arg) { return visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()); } : function () { return true; };\n    }\n    var onObjectBegin = toNoArgVisit(visitor.onObjectBegin), onObjectProperty = toOneArgVisit(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisit(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisit(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);\n    var disallowComments = options && options.disallowComments;\n    var allowTrailingComma = options && options.allowTrailingComma;\n    function scanNext() {\n        while (true) {\n            var token = _scanner.scan();\n            switch (_scanner.getTokenError()) {\n                case 4 /* InvalidUnicode */:\n                    handleError(14 /* InvalidUnicode */);\n                    break;\n                case 5 /* InvalidEscapeCharacter */:\n                    handleError(15 /* InvalidEscapeCharacter */);\n                    break;\n                case 3 /* UnexpectedEndOfNumber */:\n                    handleError(13 /* UnexpectedEndOfNumber */);\n                    break;\n                case 1 /* UnexpectedEndOfComment */:\n                    if (!disallowComments) {\n                        handleError(11 /* UnexpectedEndOfComment */);\n                    }\n                    break;\n                case 2 /* UnexpectedEndOfString */:\n                    handleError(12 /* UnexpectedEndOfString */);\n                    break;\n                case 6 /* InvalidCharacter */:\n                    handleError(16 /* InvalidCharacter */);\n                    break;\n            }\n            switch (token) {\n                case 12 /* LineCommentTrivia */:\n                case 13 /* BlockCommentTrivia */:\n                    if (disallowComments) {\n                        handleError(10 /* InvalidCommentToken */);\n                    }\n                    else {\n                        onComment();\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    handleError(1 /* InvalidSymbol */);\n                    break;\n                case 15 /* Trivia */:\n                case 14 /* LineBreakTrivia */:\n                    break;\n                default:\n                    return token;\n            }\n        }\n    }\n    function handleError(error, skipUntilAfter, skipUntil) {\n        if (skipUntilAfter === void 0) { skipUntilAfter = []; }\n        if (skipUntil === void 0) { skipUntil = []; }\n        onError(error);\n        if (skipUntilAfter.length + skipUntil.length > 0) {\n            var token = _scanner.getToken();\n            while (token !== 17 /* EOF */) {\n                if (skipUntilAfter.indexOf(token) !== -1) {\n                    scanNext();\n                    break;\n                }\n                else if (skipUntil.indexOf(token) !== -1) {\n                    break;\n                }\n                token = scanNext();\n            }\n        }\n    }\n    function parseString(isValue) {\n        var value = _scanner.getTokenValue();\n        if (isValue) {\n            onLiteralValue(value);\n        }\n        else {\n            onObjectProperty(value);\n        }\n        scanNext();\n        return true;\n    }\n    function parseLiteral() {\n        switch (_scanner.getToken()) {\n            case 11 /* NumericLiteral */:\n                var tokenValue = _scanner.getTokenValue();\n                var value = Number(tokenValue);\n                if (isNaN(value)) {\n                    handleError(2 /* InvalidNumberFormat */);\n                    value = 0;\n                }\n                onLiteralValue(value);\n                break;\n            case 7 /* NullKeyword */:\n                onLiteralValue(null);\n                break;\n            case 8 /* TrueKeyword */:\n                onLiteralValue(true);\n                break;\n            case 9 /* FalseKeyword */:\n                onLiteralValue(false);\n                break;\n            default:\n                return false;\n        }\n        scanNext();\n        return true;\n    }\n    function parseProperty() {\n        if (_scanner.getToken() !== 10 /* StringLiteral */) {\n            handleError(3 /* PropertyNameExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            return false;\n        }\n        parseString(false);\n        if (_scanner.getToken() === 6 /* ColonToken */) {\n            onSeparator(':');\n            scanNext(); // consume colon\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n        }\n        else {\n            handleError(5 /* ColonExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n        }\n        return true;\n    }\n    function parseObject() {\n        onObjectBegin();\n        scanNext(); // consume open brace\n        var needsComma = false;\n        while (_scanner.getToken() !== 2 /* CloseBraceToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 2 /* CloseBraceToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseProperty()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onObjectEnd();\n        if (_scanner.getToken() !== 2 /* CloseBraceToken */) {\n            handleError(7 /* CloseBraceExpected */, [2 /* CloseBraceToken */], []);\n        }\n        else {\n            scanNext(); // consume close brace\n        }\n        return true;\n    }\n    function parseArray() {\n        onArrayBegin();\n        scanNext(); // consume open bracket\n        var needsComma = false;\n        while (_scanner.getToken() !== 4 /* CloseBracketToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 4 /* CloseBracketToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [4 /* CloseBracketToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onArrayEnd();\n        if (_scanner.getToken() !== 4 /* CloseBracketToken */) {\n            handleError(8 /* CloseBracketExpected */, [4 /* CloseBracketToken */], []);\n        }\n        else {\n            scanNext(); // consume close bracket\n        }\n        return true;\n    }\n    function parseValue() {\n        switch (_scanner.getToken()) {\n            case 3 /* OpenBracketToken */:\n                return parseArray();\n            case 1 /* OpenBraceToken */:\n                return parseObject();\n            case 10 /* StringLiteral */:\n                return parseString(true);\n            default:\n                return parseLiteral();\n        }\n    }\n    scanNext();\n    if (_scanner.getToken() === 17 /* EOF */) {\n        if (options.allowEmptyContent) {\n            return true;\n        }\n        handleError(4 /* ValueExpected */, [], []);\n        return false;\n    }\n    if (!parseValue()) {\n        handleError(4 /* ValueExpected */, [], []);\n        return false;\n    }\n    if (_scanner.getToken() !== 17 /* EOF */) {\n        handleError(9 /* EndOfFileExpected */, [], []);\n    }\n    return true;\n}\n\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore, always check the errors list to find out if the input was valid.\n */\nvar parse = parse$1;\n\nconst isWebWorker = typeof self !== 'undefined' && typeof self.WorkerGlobalScope !== 'undefined';\r\nconst isBrowser = isWebWorker ||\r\n    (typeof window !== 'undefined' &&\r\n        typeof window.document !== 'undefined' &&\r\n        typeof fetch !== 'undefined');\r\n// to be replaced by rollup\r\nlet CDN_ROOT = '';\r\nlet WASM = '';\r\n/**\r\n * Set the route for loading the assets\r\n * URL should end with `/`\r\n *\r\n * For example:\r\n * ```ts\r\n * setCDN('https://unpkg.com/shiki/') // use unpkg\r\n * setCDN('/assets/shiki/') // serve by yourself\r\n * ```\r\n */\r\nfunction setCDN(root) {\r\n    CDN_ROOT = root;\r\n}\r\n/**\r\n * Explicitly set the source for loading the oniguruma web assembly module.\r\n *\r\n * Accepts Url or ArrayBuffer\r\n */\r\nfunction setWasm(path) {\r\n    WASM = path;\r\n}\r\nlet _onigurumaPromise = null;\r\nasync function getOniguruma() {\r\n    if (!_onigurumaPromise) {\r\n        let loader;\r\n        if (isBrowser) {\r\n            if (typeof WASM === 'string') {\r\n                loader = vscodeOniguruma.loadWASM({\r\n                    data: await fetch(_resolvePath('dist/onig.wasm')).then(r => r.arrayBuffer())\r\n                });\r\n            }\r\n            else {\r\n                loader = vscodeOniguruma.loadWASM(WASM);\r\n            }\r\n        }\r\n        else {\r\n            const path = require('path');\r\n            const wasmPath = path.join(require.resolve('vscode-oniguruma'), '../onig.wasm');\r\n            const fs = require('fs');\r\n            const wasmBin = fs.readFileSync(wasmPath).buffer;\r\n            loader = vscodeOniguruma.loadWASM(wasmBin);\r\n        }\r\n        _onigurumaPromise = loader.then(() => {\r\n            return {\r\n                createOnigScanner(patterns) {\r\n                    return vscodeOniguruma.createOnigScanner(patterns);\r\n                },\r\n                createOnigString(s) {\r\n                    return vscodeOniguruma.createOnigString(s);\r\n                }\r\n            };\r\n        });\r\n    }\r\n    return _onigurumaPromise;\r\n}\r\nfunction _resolvePath(filepath) {\r\n    if (isBrowser) {\r\n        if (!CDN_ROOT) {\r\n            console.warn('[Shiki] no CDN provider found, use `setCDN()` to specify the CDN for loading the resources before calling `getHighlighter()`');\r\n        }\r\n        return `${CDN_ROOT}${filepath}`;\r\n    }\r\n    else {\r\n        const path = require('path');\r\n        if (path.isAbsolute(filepath)) {\r\n            return filepath;\r\n        }\r\n        else {\r\n            return path.resolve(__dirname, '..', filepath);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param filepath assert path related to ./packages/shiki\r\n */\r\nasync function _fetchAssets(filepath) {\r\n    const path = _resolvePath(filepath);\r\n    if (isBrowser) {\r\n        return await fetch(path).then(r => r.text());\r\n    }\r\n    else {\r\n        const fs = require('fs');\r\n        return await fs.promises.readFile(path, 'utf-8');\r\n    }\r\n}\r\nasync function _fetchJSONAssets(filepath) {\r\n    const errors = [];\r\n    const rawTheme = parse(await _fetchAssets(filepath), errors, {\r\n        allowTrailingComma: true\r\n    });\r\n    if (errors.length) {\r\n        throw errors[0];\r\n    }\r\n    return rawTheme;\r\n}\r\n/**\r\n * @param themePath related path to theme.json\r\n */\r\nasync function fetchTheme(themePath) {\r\n    let theme = await _fetchJSONAssets(themePath);\r\n    const shikiTheme = toShikiTheme(theme);\r\n    if (shikiTheme.include) {\r\n        const includedTheme = await fetchTheme(join(dirname(themePath), shikiTheme.include));\r\n        if (includedTheme.settings) {\r\n            shikiTheme.settings = includedTheme.settings.concat(shikiTheme.settings);\r\n        }\r\n        if (includedTheme.bg && !shikiTheme.bg) {\r\n            shikiTheme.bg = includedTheme.bg;\r\n        }\r\n        if (includedTheme.colors) {\r\n            shikiTheme.colors = Object.assign(Object.assign({}, includedTheme.colors), shikiTheme.colors);\r\n        }\r\n        delete shikiTheme.include;\r\n    }\r\n    return shikiTheme;\r\n}\r\nasync function fetchGrammar(filepath) {\r\n    return await _fetchJSONAssets(filepath);\r\n}\r\nfunction repairTheme(theme) {\r\n    // Has the default no-scope setting with fallback colors\r\n    if (!theme.settings)\r\n        theme.settings = [];\r\n    if (theme.settings[0] && theme.settings[0].settings && !theme.settings[0].scope) {\r\n        return;\r\n    }\r\n    // Push a no-scope setting with fallback colors\r\n    theme.settings.unshift({\r\n        settings: {\r\n            foreground: theme.fg,\r\n            background: theme.bg\r\n        }\r\n    });\r\n}\r\nfunction toShikiTheme(rawTheme) {\r\n    const type = rawTheme.type || 'dark';\r\n    const shikiTheme = Object.assign(Object.assign({ name: rawTheme.name, type }, rawTheme), getThemeDefaultColors(rawTheme));\r\n    if (rawTheme.include) {\r\n        shikiTheme.include = rawTheme.include;\r\n    }\r\n    if (rawTheme.tokenColors) {\r\n        shikiTheme.settings = rawTheme.tokenColors;\r\n        delete shikiTheme.tokenColors;\r\n    }\r\n    repairTheme(shikiTheme);\r\n    return shikiTheme;\r\n}\r\n/**\r\n * https://github.com/microsoft/vscode/blob/f7f05dee53fb33fe023db2e06e30a89d3094488f/src/vs/platform/theme/common/colorRegistry.ts#L258-L268\r\n */\r\nconst VSCODE_FALLBACK_EDITOR_FG = { light: '#333333', dark: '#bbbbbb' };\r\nconst VSCODE_FALLBACK_EDITOR_BG = { light: '#fffffe', dark: '#1e1e1e' };\r\nfunction getThemeDefaultColors(theme) {\r\n    var _a, _b, _c, _d, _e, _f;\r\n    let fg, bg;\r\n    /**\r\n     * First try:\r\n     * Theme might contain a global `tokenColor` without `name` or `scope`\r\n     * Used as default value for foreground/background\r\n     */\r\n    let settings = theme.settings ? theme.settings : theme.tokenColors;\r\n    const globalSetting = settings\r\n        ? settings.find(s => {\r\n            return !s.name && !s.scope;\r\n        })\r\n        : undefined;\r\n    if ((_a = globalSetting === null || globalSetting === void 0 ? void 0 : globalSetting.settings) === null || _a === void 0 ? void 0 : _a.foreground) {\r\n        fg = globalSetting.settings.foreground;\r\n    }\r\n    if ((_b = globalSetting === null || globalSetting === void 0 ? void 0 : globalSetting.settings) === null || _b === void 0 ? void 0 : _b.background) {\r\n        bg = globalSetting.settings.background;\r\n    }\r\n    /**\r\n     * Second try:\r\n     * If there's no global `tokenColor` without `name` or `scope`\r\n     * Use `editor.foreground` and `editor.background`\r\n     */\r\n    if (!fg && ((_d = (_c = theme) === null || _c === void 0 ? void 0 : _c.colors) === null || _d === void 0 ? void 0 : _d['editor.foreground'])) {\r\n        fg = theme.colors['editor.foreground'];\r\n    }\r\n    if (!bg && ((_f = (_e = theme) === null || _e === void 0 ? void 0 : _e.colors) === null || _f === void 0 ? void 0 : _f['editor.background'])) {\r\n        bg = theme.colors['editor.background'];\r\n    }\r\n    /**\r\n     * Last try:\r\n     * If there's no fg/bg color specified in theme, use default\r\n     */\r\n    if (!fg) {\r\n        fg = theme.type === 'light' ? VSCODE_FALLBACK_EDITOR_FG.light : VSCODE_FALLBACK_EDITOR_FG.dark;\r\n    }\r\n    if (!bg) {\r\n        bg = theme.type === 'light' ? VSCODE_FALLBACK_EDITOR_BG.light : VSCODE_FALLBACK_EDITOR_BG.dark;\r\n    }\r\n    return {\r\n        fg,\r\n        bg\r\n    };\r\n}\n\n/*---------------------------------------------------------\r\n * Copyright (C) Microsoft Corporation. All rights reserved.\r\n *--------------------------------------------------------*/\r\nclass Resolver {\r\n    constructor(onigLibPromise, onigLibName) {\r\n        this.languagesPath = 'languages/';\r\n        this.languageMap = {};\r\n        this.scopeToLangMap = {};\r\n        this._onigLibPromise = onigLibPromise;\r\n        this._onigLibName = onigLibName;\r\n    }\r\n    get onigLib() {\r\n        return this._onigLibPromise;\r\n    }\r\n    getOnigLibName() {\r\n        return this._onigLibName;\r\n    }\r\n    getLangRegistration(langIdOrAlias) {\r\n        return this.languageMap[langIdOrAlias];\r\n    }\r\n    async loadGrammar(scopeName) {\r\n        const lang = this.scopeToLangMap[scopeName];\r\n        if (!lang) {\r\n            return null;\r\n        }\r\n        if (lang.grammar) {\r\n            return lang.grammar;\r\n        }\r\n        const g = await fetchGrammar(languages.includes(lang) ? `${this.languagesPath}${lang.path}` : lang.path);\r\n        lang.grammar = g;\r\n        return g;\r\n    }\r\n    addLanguage(l) {\r\n        this.languageMap[l.id] = l;\r\n        if (l.aliases) {\r\n            l.aliases.forEach(a => {\r\n                this.languageMap[a] = l;\r\n            });\r\n        }\r\n        this.scopeToLangMap[l.scopeName] = l;\r\n    }\r\n}\n\n/*---------------------------------------------------------\r\n * Copyright (C) Microsoft Corporation. All rights reserved.\r\n *--------------------------------------------------------*/\r\nfunction tokenizeWithTheme(theme, colorMap, fileContents, grammar, options) {\r\n    let lines = fileContents.split(/\\r\\n|\\r|\\n/);\r\n    let ruleStack = vscodeTextmate.INITIAL;\r\n    let actual = [];\r\n    let final = [];\r\n    for (let i = 0, len = lines.length; i < len; i++) {\r\n        let line = lines[i];\r\n        if (line === '') {\r\n            actual = [];\r\n            final.push([]);\r\n            continue;\r\n        }\r\n        let resultWithScopes;\r\n        let tokensWithScopes;\r\n        let tokensWithScopesIndex;\r\n        if (options.includeExplanation) {\r\n            resultWithScopes = grammar.tokenizeLine(line, ruleStack);\r\n            tokensWithScopes = resultWithScopes.tokens;\r\n            tokensWithScopesIndex = 0;\r\n        }\r\n        let result = grammar.tokenizeLine2(line, ruleStack);\r\n        let tokensLength = result.tokens.length / 2;\r\n        for (let j = 0; j < tokensLength; j++) {\r\n            let startIndex = result.tokens[2 * j];\r\n            let nextStartIndex = j + 1 < tokensLength ? result.tokens[2 * j + 2] : line.length;\r\n            if (startIndex === nextStartIndex) {\r\n                continue;\r\n            }\r\n            let metadata = result.tokens[2 * j + 1];\r\n            let foreground = StackElementMetadata.getForeground(metadata);\r\n            let foregroundColor = colorMap[foreground];\r\n            let fontStyle = StackElementMetadata.getFontStyle(metadata);\r\n            let explanation = [];\r\n            if (options.includeExplanation) {\r\n                let offset = 0;\r\n                while (startIndex + offset < nextStartIndex) {\r\n                    let tokenWithScopes = tokensWithScopes[tokensWithScopesIndex];\r\n                    let tokenWithScopesText = line.substring(tokenWithScopes.startIndex, tokenWithScopes.endIndex);\r\n                    offset += tokenWithScopesText.length;\r\n                    explanation.push({\r\n                        content: tokenWithScopesText,\r\n                        scopes: explainThemeScopes(theme, tokenWithScopes.scopes)\r\n                    });\r\n                    tokensWithScopesIndex++;\r\n                }\r\n            }\r\n            actual.push({\r\n                content: line.substring(startIndex, nextStartIndex),\r\n                color: foregroundColor,\r\n                fontStyle,\r\n                explanation: explanation\r\n            });\r\n        }\r\n        final.push(actual);\r\n        actual = [];\r\n        ruleStack = result.ruleStack;\r\n    }\r\n    return final;\r\n}\r\nfunction explainThemeScopes(theme, scopes) {\r\n    let result = [];\r\n    for (let i = 0, len = scopes.length; i < len; i++) {\r\n        let parentScopes = scopes.slice(0, i);\r\n        let scope = scopes[i];\r\n        result[i] = {\r\n            scopeName: scope,\r\n            themeMatches: explainThemeScope(theme, scope, parentScopes)\r\n        };\r\n    }\r\n    return result;\r\n}\r\nfunction matchesOne(selector, scope) {\r\n    let selectorPrefix = selector + '.';\r\n    if (selector === scope || scope.substring(0, selectorPrefix.length) === selectorPrefix) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction matches(selector, selectorParentScopes, scope, parentScopes) {\r\n    if (!matchesOne(selector, scope)) {\r\n        return false;\r\n    }\r\n    let selectorParentIndex = selectorParentScopes.length - 1;\r\n    let parentIndex = parentScopes.length - 1;\r\n    while (selectorParentIndex >= 0 && parentIndex >= 0) {\r\n        if (matchesOne(selectorParentScopes[selectorParentIndex], parentScopes[parentIndex])) {\r\n            selectorParentIndex--;\r\n        }\r\n        parentIndex--;\r\n    }\r\n    if (selectorParentIndex === -1) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction explainThemeScope(theme, scope, parentScopes) {\r\n    let result = [], resultLen = 0;\r\n    for (let i = 0, len = theme.settings.length; i < len; i++) {\r\n        let setting = theme.settings[i];\r\n        let selectors;\r\n        if (typeof setting.scope === 'string') {\r\n            selectors = setting.scope.split(/,/).map(scope => scope.trim());\r\n        }\r\n        else if (Array.isArray(setting.scope)) {\r\n            selectors = setting.scope;\r\n        }\r\n        else {\r\n            continue;\r\n        }\r\n        for (let j = 0, lenJ = selectors.length; j < lenJ; j++) {\r\n            let rawSelector = selectors[j];\r\n            let rawSelectorPieces = rawSelector.split(/ /);\r\n            let selector = rawSelectorPieces[rawSelectorPieces.length - 1];\r\n            let selectorParentScopes = rawSelectorPieces.slice(0, rawSelectorPieces.length - 1);\r\n            if (matches(selector, selectorParentScopes, scope, parentScopes)) {\r\n                // match!\r\n                result[resultLen++] = setting;\r\n                // break the loop\r\n                j = lenJ;\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\n\nfunction renderToHtml(lines, options = {}) {\r\n    var _a;\r\n    const bg = options.bg || '#fff';\r\n    const optionsByLineNumber = groupBy((_a = options.lineOptions) !== null && _a !== void 0 ? _a : [], option => option.line);\r\n    let html = '';\r\n    html += `<pre class=\"shiki\" style=\"background-color: ${bg}\">`;\r\n    if (options.langId) {\r\n        html += `<div class=\"language-id\">${options.langId}</div>`;\r\n    }\r\n    html += `<code>`;\r\n    lines.forEach((l, lineIndex) => {\r\n        var _a;\r\n        const lineNumber = lineIndex + 1;\r\n        const lineOptions = (_a = optionsByLineNumber.get(lineNumber)) !== null && _a !== void 0 ? _a : [];\r\n        const lineClasses = getLineClasses(lineOptions).join(' ');\r\n        html += `<span class=\"${lineClasses}\">`;\r\n        l.forEach(token => {\r\n            const cssDeclarations = [`color: ${token.color || options.fg}`];\r\n            if (token.fontStyle & exports.FontStyle.Italic) {\r\n                cssDeclarations.push('font-style: italic');\r\n            }\r\n            if (token.fontStyle & exports.FontStyle.Bold) {\r\n                cssDeclarations.push('font-weight: bold');\r\n            }\r\n            if (token.fontStyle & exports.FontStyle.Underline) {\r\n                cssDeclarations.push('text-decoration: underline');\r\n            }\r\n            html += `<span style=\"${cssDeclarations.join('; ')}\">${escapeHtml(token.content)}</span>`;\r\n        });\r\n        html += `</span>\\n`;\r\n    });\r\n    html = html.replace(/\\n*$/, ''); // Get rid of final new lines\r\n    html += `</code></pre>`;\r\n    return html;\r\n}\r\nconst htmlEscapes = {\r\n    '&': '&amp;',\r\n    '<': '&lt;',\r\n    '>': '&gt;',\r\n    '\"': '&quot;',\r\n    \"'\": '&#39;'\r\n};\r\nfunction escapeHtml(html) {\r\n    return html.replace(/[&<>\"']/g, chr => htmlEscapes[chr]);\r\n}\r\nfunction getLineClasses(lineOptions) {\r\n    var _a;\r\n    const lineClasses = new Set(['line']);\r\n    for (const lineOption of lineOptions) {\r\n        for (const lineClass of (_a = lineOption.classes) !== null && _a !== void 0 ? _a : []) {\r\n            lineClasses.add(lineClass);\r\n        }\r\n    }\r\n    return Array.from(lineClasses);\r\n}\n\nclass Registry extends vscodeTextmate.Registry {\r\n    constructor(_resolver) {\r\n        super(_resolver);\r\n        this._resolver = _resolver;\r\n        this.themesPath = 'themes/';\r\n        this._resolvedThemes = {};\r\n        this._resolvedGrammars = {};\r\n    }\r\n    getTheme(theme) {\r\n        if (typeof theme === 'string') {\r\n            return this._resolvedThemes[theme];\r\n        }\r\n        else {\r\n            return theme;\r\n        }\r\n    }\r\n    async loadTheme(theme) {\r\n        if (typeof theme === 'string') {\r\n            if (!this._resolvedThemes[theme]) {\r\n                this._resolvedThemes[theme] = await fetchTheme(`${this.themesPath}${theme}.json`);\r\n            }\r\n            return this._resolvedThemes[theme];\r\n        }\r\n        else {\r\n            theme = toShikiTheme(theme);\r\n            if (theme.name) {\r\n                this._resolvedThemes[theme.name] = theme;\r\n            }\r\n            return theme;\r\n        }\r\n    }\r\n    async loadThemes(themes) {\r\n        return await Promise.all(themes.map(theme => this.loadTheme(theme)));\r\n    }\r\n    getLoadedThemes() {\r\n        return Object.keys(this._resolvedThemes);\r\n    }\r\n    getGrammar(name) {\r\n        return this._resolvedGrammars[name];\r\n    }\r\n    async loadLanguage(lang) {\r\n        const g = await this.loadGrammar(lang.scopeName);\r\n        this._resolvedGrammars[lang.id] = g;\r\n        if (lang.aliases) {\r\n            lang.aliases.forEach(la => {\r\n                this._resolvedGrammars[la] = g;\r\n            });\r\n        }\r\n    }\r\n    async loadLanguages(langs) {\r\n        for (const lang of langs) {\r\n            this._resolver.addLanguage(lang);\r\n        }\r\n        for (const lang of langs) {\r\n            await this.loadLanguage(lang);\r\n        }\r\n    }\r\n    getLoadedLanguages() {\r\n        return Object.keys(this._resolvedGrammars);\r\n    }\r\n}\n\nfunction resolveLang(lang) {\r\n    return typeof lang === 'string'\r\n        ? languages.find(l => { var _a; return l.id === lang || ((_a = l.aliases) === null || _a === void 0 ? void 0 : _a.includes(lang)); })\r\n        : lang;\r\n}\r\nfunction resolveOptions(options) {\r\n    var _a;\r\n    let _languages = languages;\r\n    let _themes = options.themes || [];\r\n    if ((_a = options.langs) === null || _a === void 0 ? void 0 : _a.length) {\r\n        _languages = options.langs.map(resolveLang);\r\n    }\r\n    if (options.theme) {\r\n        _themes.unshift(options.theme);\r\n    }\r\n    if (!_themes.length) {\r\n        _themes = ['nord'];\r\n    }\r\n    return { _languages, _themes };\r\n}\r\nasync function getHighlighter(options) {\r\n    var _a, _b;\r\n    const { _languages, _themes } = resolveOptions(options);\r\n    const _resolver = new Resolver(getOniguruma(), 'vscode-oniguruma');\r\n    const _registry = new Registry(_resolver);\r\n    if ((_a = options.paths) === null || _a === void 0 ? void 0 : _a.themes) {\r\n        _registry.themesPath = options.paths.themes;\r\n    }\r\n    if ((_b = options.paths) === null || _b === void 0 ? void 0 : _b.languages) {\r\n        _resolver.languagesPath = options.paths.languages;\r\n    }\r\n    const themes = await _registry.loadThemes(_themes);\r\n    const _defaultTheme = themes[0];\r\n    let _currentTheme;\r\n    await _registry.loadLanguages(_languages);\r\n    /**\r\n     * Shiki was designed for VS Code, so CSS variables are not currently supported.\r\n     * See: https://github.com/shikijs/shiki/pull/212#issuecomment-906924986\r\n     *\r\n     * Instead, we work around this by using valid hex color codes as lookups in a\r\n     * final \"repair\" step which translates those codes to the correct CSS variables.\r\n     */\r\n    const COLOR_REPLACEMENTS = {\r\n        '#000001': 'var(--shiki-color-text)',\r\n        '#000002': 'var(--shiki-color-background)',\r\n        '#000004': 'var(--shiki-token-constant)',\r\n        '#000005': 'var(--shiki-token-string)',\r\n        '#000006': 'var(--shiki-token-comment)',\r\n        '#000007': 'var(--shiki-token-keyword)',\r\n        '#000008': 'var(--shiki-token-parameter)',\r\n        '#000009': 'var(--shiki-token-function)',\r\n        '#000010': 'var(--shiki-token-string-expression)',\r\n        '#000011': 'var(--shiki-token-punctuation)',\r\n        '#000012': 'var(--shiki-token-link)'\r\n    };\r\n    function fixCssVariablesTheme(theme, colorMap) {\r\n        theme.bg = COLOR_REPLACEMENTS[theme.bg] || theme.bg;\r\n        theme.fg = COLOR_REPLACEMENTS[theme.fg] || theme.fg;\r\n        colorMap.forEach((val, i) => {\r\n            colorMap[i] = COLOR_REPLACEMENTS[val] || val;\r\n        });\r\n    }\r\n    function getTheme(theme) {\r\n        const _theme = theme ? _registry.getTheme(theme) : _defaultTheme;\r\n        if (!_theme) {\r\n            throw Error(`No theme registration for ${theme}`);\r\n        }\r\n        if (!_currentTheme || _currentTheme.name !== _theme.name) {\r\n            _registry.setTheme(_theme);\r\n            _currentTheme = _theme;\r\n        }\r\n        const _colorMap = _registry.getColorMap();\r\n        if (_theme.name === 'css-variables') {\r\n            fixCssVariablesTheme(_theme, _colorMap);\r\n        }\r\n        return { _theme, _colorMap };\r\n    }\r\n    function getGrammar(lang) {\r\n        const _grammar = _registry.getGrammar(lang);\r\n        if (!_grammar) {\r\n            throw Error(`No language registration for ${lang}`);\r\n        }\r\n        return { _grammar };\r\n    }\r\n    function codeToThemedTokens(code, lang = 'text', theme, options = { includeExplanation: true }) {\r\n        if (isPlaintext(lang)) {\r\n            const lines = code.split(/\\r\\n|\\r|\\n/);\r\n            return [...lines.map(line => [{ content: line }])];\r\n        }\r\n        const { _grammar } = getGrammar(lang);\r\n        const { _theme, _colorMap } = getTheme(theme);\r\n        return tokenizeWithTheme(_theme, _colorMap, code, _grammar, options);\r\n    }\r\n    function codeToHtml(code, arg1 = 'text', arg2) {\r\n        let options;\r\n        // codeToHtml(code, options?) overload\r\n        if (typeof arg1 === 'object') {\r\n            options = arg1;\r\n        }\r\n        // codeToHtml(code, lang?, theme?) overload\r\n        else {\r\n            options = {\r\n                lang: arg1,\r\n                theme: arg2\r\n            };\r\n        }\r\n        const tokens = codeToThemedTokens(code, options.lang, options.theme, {\r\n            includeExplanation: false\r\n        });\r\n        const { _theme } = getTheme(options.theme);\r\n        return renderToHtml(tokens, {\r\n            fg: _theme.fg,\r\n            bg: _theme.bg,\r\n            lineOptions: options === null || options === void 0 ? void 0 : options.lineOptions\r\n        });\r\n    }\r\n    async function loadTheme(theme) {\r\n        await _registry.loadTheme(theme);\r\n    }\r\n    async function loadLanguage(lang) {\r\n        const _lang = resolveLang(lang);\r\n        _resolver.addLanguage(_lang);\r\n        await _registry.loadLanguage(_lang);\r\n    }\r\n    function getLoadedThemes() {\r\n        return _registry.getLoadedThemes();\r\n    }\r\n    function getLoadedLanguages() {\r\n        return _registry.getLoadedLanguages();\r\n    }\r\n    function getBackgroundColor(theme) {\r\n        const { _theme } = getTheme(theme);\r\n        return _theme.bg;\r\n    }\r\n    function getForegroundColor(theme) {\r\n        const { _theme } = getTheme(theme);\r\n        return _theme.fg;\r\n    }\r\n    return {\r\n        codeToThemedTokens,\r\n        codeToHtml,\r\n        getTheme: (theme) => {\r\n            return getTheme(theme)._theme;\r\n        },\r\n        loadTheme,\r\n        loadLanguage,\r\n        getBackgroundColor,\r\n        getForegroundColor,\r\n        getLoadedThemes,\r\n        getLoadedLanguages\r\n    };\r\n}\r\nfunction isPlaintext(lang) {\r\n    return !lang || ['plaintext', 'txt', 'text'].includes(lang);\r\n}\n\n/** @deprecated use setWasm instead, will be removed in a future version */\r\nfunction setOnigasmWASM(path) {\r\n    setWasm(path);\r\n}\n\nexports.BUNDLED_LANGUAGES = languages;\nexports.BUNDLED_THEMES = themes;\nexports.getHighlighter = getHighlighter;\nexports.loadTheme = fetchTheme;\nexports.renderToHtml = renderToHtml;\nexports.setCDN = setCDN;\nexports.setOnigasmWASM = setOnigasmWASM;\nexports.setWasm = setWasm;\nexports.toShikiTheme = toShikiTheme;\n"]}